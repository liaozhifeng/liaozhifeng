<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>csapp实验一总结</title>
    <url>/2021/03/15/csapp%E5%AE%9E%E9%AA%8C%E4%B8%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近在看csapp，也做了一些实验，怕以后又忘记了，就记录一下，也能巩固知识。</p>
<p>实验一主要是关于位运算跟补码和浮点数的表示的。</p>
<h3 id="题目">题目</h3>
<h4 id="整数部分">整数部分</h4>
<ul>
<li><p><strong>biXor</strong>（用~和&amp;两个位运算去表示异或运算）</p>
<p>因为异或就是两位不同的为1，相同的为0嘛，所以我们可以先找出都是0和都为1的位，找出都为1的位可以直接用<code>x &amp; y</code>，找出都为0的位可以使用<code>~x &amp; ~y</code>，最后把这两个结果分别取反再<code>&amp;</code>一次就得到最后的结果。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _x = ~x;</span><br><span class="line">  <span class="keyword">int</span> _y = ~y;</span><br><span class="line">  <span class="keyword">int</span> temp = _x &amp; _y;</span><br><span class="line">  <span class="keyword">int</span> ans = ~temp &amp; (~(x &amp; y));</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>tmin</strong>（返回用补码表示的最小数） 我们知道补码的范围为<span class="math inline">\(2^{n-1} ... 2^{n-1}-1\)</span>，且<span class="math inline">\(2^{n-1}\)</span>为最高位为1，其他都为<span class="math inline">\(0\)</span>，所以我们只需要把<span class="math inline">\(1\)</span>左移$3$1位，就能得到min。</p>
<a id="more"></a>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans = x &lt;&lt; <span class="number">31</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>isTmax</strong>（判断一个数是否为补码表示的最大值） 因为补码表示的最大值的二进制形式为<span class="math inline">\(0x7fffffff\)</span>，它加<span class="math inline">\(1\)</span>恰好为<strong>tmin</strong>，所以我们只需把<strong>tmin</strong>减一，就能得到<strong>max</strong>，然后再用<span class="math inline">\(max-x\)</span>再取反，就能得到最后结果。这个题也解释了我当时大一刚学编程的困惑，而且学计组的时候我好像也没有注意到这个细节，我有问题哈哈。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans = _x &lt;&lt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> _MAX = ans + (~_x + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> !(_MAX - x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>allOddBits</strong>（所以奇数位的数字都为1） 首先先构造奇数位都为1，偶数位都为0的数字，我是用<span class="math inline">\(0xaa\)</span>不断左移再加<span class="math inline">\(0xaa\)</span>构造的，得到这个数后，用<code>x&amp;</code>这个数，加减去这个数，如果不为0，就说明奇数位不是全为0.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> per = <span class="number">0xaa</span>, ans = <span class="number">0xaa</span>;</span><br><span class="line">  ans &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">  ans += per;</span><br><span class="line">  ans &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">  ans += per;</span><br><span class="line">  ans &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">  ans += per;</span><br><span class="line">  <span class="keyword">return</span> !((ans &amp; x) - ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>negate</strong>（返回一个数的相反数） 这个算是里面最简单的把，取反加1就能得到了。另外csapp里提到的，补码实际上是阿贝尔群，每个元素的逆元都是取反加1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = ~x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>isAsciiDigit</strong>（判断一个x是否满足<span class="math inline">\(0x30 \leq x \leq 0x39\)</span>） 我的思路是先表示<span class="math inline">\(0x30\)</span>和<span class="math inline">\(0x39\)</span>，判断<span class="math inline">\(x-0x30\)</span>的符号位为<span class="math inline">\(0\)</span>且<span class="math inline">\(0x39-x\)</span>的符号为<span class="math inline">\(0\)</span>，如果满足就为真，否则为假。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _min = <span class="number">0x30</span>;</span><br><span class="line">  <span class="keyword">int</span> _max = <span class="number">0x39</span>;</span><br><span class="line">  <span class="keyword">int</span> _x = ~_min + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans1 = !((_x + x) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">int</span> __x = ~x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans2 = !((__x + _max) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">int</span> ans = ans1 &amp; ans2;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>conditional</strong>（实现三目运算符$ x? y:z<span class="math inline">\(） 如果\)</span>x$非<span class="math inline">\(0\)</span>就把<span class="math inline">\(x\)</span>转换成<span class="math inline">\(0xffffffff\)</span>，转换的方法可以借助对<span class="math inline">\(x\)</span>取两次非，再取它的相反数；<span class="math inline">\(x=0\)</span>时，也采用上述方法，<span class="math inline">\(x\)</span>结果还是<span class="math inline">\(0\)</span>，然后利用<span class="math inline">\(~ 0xffffffff = 0x00000000\)</span>，就可以实现了。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  x = !!x;</span><br><span class="line">  x = ~x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (x &amp; y) | (~x &amp; z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>isLessOrEqual</strong>（判断<span class="math inline">\(x\leq y\)</span>是否成立） 如果<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>的符号不同，则判断<span class="math inline">\(y-x\)</span>的符号位，如果<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>的符号位不同，则谁的符号位为<span class="math inline">\(0\)</span>则，谁更大。利用<code>x_sign ^ y_sign</code>判断符号为是否相同，另外如果有多种情况的，一般都要用<span class="math inline">\(|\)</span>运算符。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _x = ~x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans = _x + y;</span><br><span class="line">  <span class="keyword">int</span> sign = (ans &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> x_sign = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> y_sign = (y &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> ((x_sign ^ y_sign) &amp; ((!y_sign) &amp; x_sign)) | (!(x_sign ^ y_sign) &amp; (!sign));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>logicalNeg</strong>（实现<span class="math inline">\(! \space x\)</span>） 利用<span class="math inline">\(0\)</span>的逆元仍为<span class="math inline">\(0\)</span>，所以<span class="math inline">\(0\)</span>与它的逆元的符号位都是0，而其他的数和它的逆元的符号位至少有一个是<span class="math inline">\(1\)</span>。然后把符号位右移<span class="math inline">\(31\)</span>位，如果符号位为<span class="math inline">\(1\)</span>则为<span class="math inline">\(0xffffffff\)</span>，符号位为<span class="math inline">\(0\)</span>则为<span class="math inline">\(0x00000000\)</span>，然后加<span class="math inline">\(1\)</span>就是最终结果。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x | (~x + <span class="number">1</span>)) &gt;&gt; <span class="number">31</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>howManyBits</strong>（一个数的补码最少需要几个bits去表示） 这个题我不会，主要是搞不懂为什么表示<span class="math inline">\(-1\)</span>为什么只需要<span class="math inline">\(1\)</span>位，这里有个代码来自，<a href="https://zhuanlan.zhihu.com/p/59534845">知乎用户</a>，可以参考下，如果有哪位朋友知道<span class="math inline">\(-1\)</span>为什么只需一位可以联系我。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s compblement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> b16,b8,b4,b2,b1,b0;</span><br><span class="line">  <span class="keyword">int</span> sign=x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  x = (sign&amp;~x)|(~sign&amp;x);<span class="comment">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断缩小范围</span></span><br><span class="line">  b16 = !!(x&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">4</span>;<span class="comment">//高十六位是否有1</span></span><br><span class="line">  x = x&gt;&gt;b16;<span class="comment">//如果有（至少需要16位），则将原数右移16位</span></span><br><span class="line">  b8 = !!(x&gt;&gt;<span class="number">8</span>)&lt;&lt;<span class="number">3</span>;<span class="comment">//剩余位高8位是否有1</span></span><br><span class="line">  x = x&gt;&gt;b8;<span class="comment">//如果有（至少需要16+8=24位），则右移8位</span></span><br><span class="line">  b4 = !!(x&gt;&gt;<span class="number">4</span>)&lt;&lt;<span class="number">2</span>;<span class="comment">//同理</span></span><br><span class="line">  x = x&gt;&gt;b4;</span><br><span class="line">  b2 = !!(x&gt;&gt;<span class="number">2</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  x = x&gt;&gt;b2;</span><br><span class="line">  b1 = !!(x&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  x = x&gt;&gt;b1;</span><br><span class="line">  b0 = x;</span><br><span class="line">  <span class="keyword">return</span> b16+b8+b4+b2+b1+b0+<span class="number">1</span>;<span class="comment">//+1表示加上符号位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="浮点数部分">浮点数部分</h4>
<p>在说题目之前我想先来写一些浮点数表示的方法，以及一些注意事项。 现在计算机基本上都采用了IEEE754标准来表示浮点数，改标准把浮点数的表示为<span class="math inline">\(V = (-1)^s * M * 2^E\)</span>这种形式，其中<span class="math inline">\(s\)</span>称为符号位，<span class="math inline">\(M\)</span>称为尾数，<span class="math inline">\(E\)</span>称为阶码，对于单精度浮点数，它们在各自所在的位置以及位数为 <img src="https://i.loli.net/2021/03/14/gkbXuMNx91pilHD.png" alt="image-20210314220405589" /></p>
<p>这里我们也就只讨论单精度。 浮点数的表示分为4种情况，<img src="https://i.loli.net/2021/03/14/5pWPtB4Zcx8Akwv.png" alt="image-20210314220858815" /></p>
<p>如果<span class="math inline">\(exp \neq 0\space \&amp; \space exp \neq 255\)</span> , 称为规格化，<span class="math inline">\(E = exp - 127\)</span>，<span class="math inline">\(M = 1.f\)</span>。 如果<span class="math inline">\(exp==0\)</span>，这情况称为为规格化(Denormalized)，<span class="math inline">\(E = -127(bias)，M = 0.f\)</span>，这里的处理与规格化处理是不同的，这种处理也是为了从非规格化处理到规格化处理转变的更加平滑，这里举个<span class="math inline">\(exp\)</span>位数为<span class="math inline">\(3\)</span>，<span class="math inline">\(fraction\)</span>位数为<span class="math inline">\(2\)</span>的转变例子。 <img src="https://i.loli.net/2021/03/14/b7z41W39MvYle5t.png" alt="image-20210314233514394" /></p>
<p>可以看到从最大的非规格化数<span class="math inline">\((\frac{7}{8})\)</span>过渡到最小的规格化数<span class="math inline">\(\frac{8}{8}\)</span>是非常平滑的，这个特点在<strong>floatScale</strong>会利用到的。</p>
<ul>
<li><p><strong>floatScale</strong>（求<span class="math inline">\(2*uf\)</span>）</p>
<p>先说一下简单的思路，因为<span class="math inline">\(uf= (-1)^s* M *2^E\)</span>，所以要得到<span class="math inline">\(2*uf\)</span>，最直白的做法是直接让<span class="math inline">\(E = E + 1\)</span>，因为要使<span class="math inline">\(M = 2*M\)</span>，不是那么简单的。 先提取出<span class="math inline">\(exp\)</span>，如果<span class="math inline">\(exp == 255\)</span>则会使为<span class="math inline">\(NaN\)</span>，按照题目要求返回<span class="math inline">\(uf\)</span>， 否则，再提取出<span class="math inline">\(f\)</span>的符号位<span class="math inline">\(sign\)</span>，如果<span class="math inline">\(exp == 0\)</span>，表示这个数是未规格化的，<span class="math inline">\(E = 1-bias\)</span>，<span class="math inline">\(M = 0.f\)</span>，这个情况就是让<span class="math inline">\(M = 2*M\)</span>，如果<span class="math inline">\(M\)</span>有进位，<span class="math inline">\(exp == 1\)</span>，<span class="math inline">\(E = 1-bias\)</span>，<span class="math inline">\(M = 1.f&#39;\)</span>，此时<span class="math inline">\(exp == exp\)</span>，且易证<span class="math inline">\(2*0,f = 1.f&#39;\)</span>，所以实现了功能。 如果<span class="math inline">\(exp\)</span>不是上面那两种情况，则我们可以用最简单的思路去解决，<span class="math inline">\(exp = exp + 1\)</span>，如果<span class="math inline">\(exp == 255\)</span>，所以溢出了，变成<span class="math inline">\(infinity\)</span>，返回<span class="math inline">\(infinity\)</span>，注意符号。如果不等于<span class="math inline">\(255\)</span>则直接先把<span class="math inline">\(uf\)</span>的<span class="math inline">\(exp\)</span>置为<span class="math inline">\(0\)</span>，然后再把新的<span class="math inline">\(exp \space |\)</span>进去。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//float</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = (uf &amp; <span class="number">0x7f800000</span>) &gt;&gt; <span class="number">23</span>;</span><br><span class="line">  <span class="keyword">int</span> sign = uf &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> == <span class="number">255</span>)  <span class="keyword">return</span> uf;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> == <span class="number">0</span>)  <span class="keyword">return</span> (uf&lt;&lt;<span class="number">1</span>) | sign;</span><br><span class="line">  <span class="built_in">exp</span>++;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> == <span class="number">255</span>)  <span class="keyword">return</span> <span class="number">0x7f800000</span> | sign;</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">return</span> (uf &amp; <span class="number">0x807fffff</span>) | (<span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>floatFloat2Int</strong>（实现把<code>float</code>转换成<code>int</code>)</p>
<p>首先要先提取出<code>float</code>的<code>exp</code>和<code>frac</code>的值，注意这里的<code>frac</code>要在前面添上<span class="math inline">\(1\)</span>，因为对于<code>int_32</code>，其表示范围为<span class="math inline">\(-2^{32} ... 2^{32} -1\)</span>，所以如果<span class="math inline">\(exp - 127 &gt;31\)</span>，则说明会发生溢出，根据题目要求返回<span class="math inline">\(infinity\)</span>，如果<span class="math inline">\(exp - 127&lt;0 \space | \ exp\_frac ==0\)</span>返回<span class="math inline">\(0\)</span>。 否则对根据<span class="math inline">\(exp\)</span>对<span class="math inline">\(frac\)</span>进行左移或者右移，再判断<span class="math inline">\(frac\)</span>的符号是否与原来的<code>float</code>相同，相同返回<span class="math inline">\(frac\)</span>，如果发生了正溢出（原来为正的，变成负的了）则返回<span class="math inline">\(infinity\)</span>，如果发生负溢出，则返回相反数，两种溢出的处理方式不同，主要是因为，发生正溢出，说明<code>int</code>有一位被当成符号位了，也就是说这个<code>int</code>的真值部分就需要<span class="math inline">\(32\)</span>位，所以超过了表示的范围。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = ((uf &amp; <span class="number">0x7f800000</span>) &gt;&gt; <span class="number">23</span> )- <span class="number">127</span>;</span><br><span class="line">  <span class="keyword">int</span> frac = (uf &amp; <span class="number">0x007fffff</span>) | <span class="number">0x00800000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(uf &amp; <span class="number">0x7fffffff</span>))  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">31</span>)  <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> &lt; <span class="number">23</span>)</span><br><span class="line">    frac = frac &gt;&gt; (<span class="number">23</span> - <span class="built_in">exp</span>);</span><br><span class="line">  <span class="keyword">else</span>  frac = frac &lt;&lt; (<span class="built_in">exp</span> - <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sign = uf &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">if</span>(!((frac&gt;&gt;<span class="number">31</span>) ^ sign))  <span class="keyword">return</span> frac;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(frac&gt;&gt;<span class="number">31</span>)  <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">return</span> ~frac + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>floatPower2</strong>（返回<span class="math inline">\(2.0^x\)</span>） 因为<span class="math inline">\(V=(-1)^{sign}*M*2^E\)</span>，要得到<span class="math inline">\(2.0^x\)</span>我们只需要改变<span class="math inline">\(E\)</span>的值，也就是改变<span class="math inline">\(exp\)</span>的值，而<span class="math inline">\(M=0\)</span>，如果<span class="math inline">\(exp\geq255\)</span>，返回<span class="math inline">\(+infinity(0x7f800000)\)</span>，如果<span class="math inline">\(exp\leq0\)</span>返回<span class="math inline">\(0\)</span>，否则返回<span class="math inline">\(exp&lt;&lt;23\)</span>。 代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">  <span class="keyword">int</span> INF = <span class="number">0xff</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">exp</span> &gt;= <span class="number">255</span>)  <span class="keyword">return</span> INF;   </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>java解耦合的学习记录</title>
    <url>/2021/05/29/java%E8%A7%A3%E8%80%A6%E5%90%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>程序的耦合主要有类之间的依赖和程序间的依赖，以jdbc的使用做为一个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.cj.jdbc.Driver());</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/eesy?		                 serverTimezone=GMT&amp;useSSL=false&quot;</span>,</span><br><span class="line">                <span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//3.获取操作数据库的预处理对象</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">&quot;select * from account&quot;</span>);</span><br><span class="line"><span class="comment">//4.执行SQL,得到结果集</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    System.out.println(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
<p>这里<code>Driver()</code>使用的是mysql，这段代码高度高度依赖于<code>com.mysql.cj.jdbc.Driver</code>，如果将来<code>com.mysql.cj.jdbc.Driver</code>出现了问题，那么这段代码就发生错误，或者当我们需要更改需求时，比如如果程序间的耦合度太高，要改的代码也就更多。</p>
<p>解耦的目的是降低程序间的依赖关系，主要是程序尽量模块化，使程序尽量做到编译期不依赖，运行时才依赖。</p>
<p>解耦的一种思路：第一步，使用反射来创建对象，而不是new；第二步，通过读取配置文件来获取要创建的对象全限定类名，也就是采用工厂设计模式。举一个service层和dao层的例子，采用工厂模式前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xinyu.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xinyu.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xinyu.dao.IAccountDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存了账户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xinyu.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xinyu.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xinyu.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.xinyu.dao.impl.AccountDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.xinyu.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> com.xinyu.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到我们在AccoutServiceImpl直接new了一个AccoutDaoImpl对象，也就是说AccountServiceImpl会高度依赖于AccoutDaoImpl，它们之间耦合度很高。所以我们编写一个工厂类<code>BeanFactory</code>在类里利用反射创建对象，并创建一个配置文件，在里面配置对象名与全限定类名的映射关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xinyu.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            properties.load(in);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化properties失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象，这种方式获取的bean是多例的，既同一个类型的多个bean是不同的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = properties.getProperty(beanName);</span><br><span class="line">            <span class="comment">//使用了反射</span></span><br><span class="line">            bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accountDao</span> = <span class="string">com.xinyu.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以把<code>AccountServiceImpl</code>的代码改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xinyu.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xinyu.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.xinyu.dao.impl.AccountDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.xinyu.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> com.xinyu.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是以这种方式创建工厂也会带来一点问题，因为我们在<code>getBean</code>方法中采用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure>
<p>去创建bean，所以假设我们在<code>AccountServiceImpl</code>里需要多个<code>IAccountDao</code>，那么这多个<code>IAccountDao</code>也是不同的（多例模式），如果我们想要提高利用率，也就是用单例模式，这时就需要容器这个概念了。我们可以在<code>BeanFactory</code>中定义一个Map，用来存储bean, 并在static执行时，就通过读取.properties里的所有映射关系，将bean初始化后存入Map中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xinyu.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="comment">//bean容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在static中一开始就对所有的bean初始化，并存放在map中，然后获取bean时就直接返回这里初始化的对象就好</span></span><br><span class="line">            <span class="comment">//这种方式是单例模式，既同个类型的多个对象是同一个</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Enumeration&lt;Object&gt; keys = properties.keys();</span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                String beanPath = properties.getProperty(key);</span><br><span class="line">                Object value = Class.forName(beanPath).getConstructor().newInstance();</span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化properties失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>通过这种方式就能使创建的bean是单例的了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>一些想法</title>
    <url>/2020/08/16/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1965e04c7cfc76d75b38aca7afed1d23d53c3fa335df43a936138d0fe45d0c9d">dc539cac4ab894d5e83acb08e14db5a30e8a3c95e06d6034ba80ad782b33a51886cad32a6f8a1dfa1e4a6bc34c9d4018abd7e32e330cd7be6be92fa8b78f82393b5a7b007dc491206f3a6ca368ac1cffa1ca1ab665448488bd8436916c59f9bb79eba4fc3332a4cd09e6fac0bcbe97af4a67dcd1492b4030970c9901dbe525881726cdc7e317f4ad5a5fbdfd49d0667be07f6962d306e5711713b5410a45d3fb23c2eedeefbfd95ba85a2966dc71b40be4ce1c332da796f4157b7827ec0da797bfdd1ff73514fd933e35cd8fc027af85d52a79553f56b392e392c44506ad997b27c1c1a706cc8a1d6de376dbad56801a6a2a74c20c58d3fdd5078cf1b102d0ab1dfed6845747c47eecec1ddb00a56a591978bd6f9979934c8cfc899ffe8064e768b3c2c687d99bf87b7c3e2abbd30b4bf43a0361eddb84c0c8dccfbc0cae53e8af9f0b3e1aa90c6370055f0b0595bd122260e8cba6ff356408a54da84bb07fde31bc64a3c22043f503aec45163da1f0016ec1b5b68bc54c90f49e3eb2836ea8fa9bb0462a6f15659df69b7acace5f60bf5a3b60b846a572c84b288d01f515f07f13f63a467f9d24e0a05745ac914ff87232f85edec8ca28b0dd3d6ee8e343eeda857ea2d918a60dbc829aa5be286aec0fbf28073f61f1de316c06868b2c456608a79235df6679a5d4cafcc7baa0c031b619d635b58fa0caba1ccf227848363125a33cbf33c4909df5e2c33aa29f086dfcc6b4330aaab4ded4d04caa9a352c8b66a192e7cf6b2f22fbcfaa5dac406d36e06992a88e130c627b2d571240a7d3d92889c323faa6ba65d6cc9d7ba83abdd3a4c27bb5f09f5162c481d15687ee4c2eda1b3ee4c6cbd6759288d060098c43a8c195db09d05a4fd50d684cc59d15fcc57037cbb9804147babcca6ec5d05d8bc4bfe08d4878453dd911f820028f9e05e8cf80faa64732db51778ad7417566d299ea3011db7eb00966b456700677c9e5286e5fdf5de5b506b0a3ebd01e54f0ff82ce8c273cac38d0f3dd6e5bbf02a05613e8427300595e8c7e7b18e3c8e5c6fa1d0f772f9febdcfcbfa588a987963bafd2009aff9e449dcbe1688a084ed6f78a39a1e39d77b2472c9787614672fca833ca3acdcae5701d2eef0aae735d4073f23179f14ab49cf7ba2348b6132295246f1db869861da706ad897d2d4caf4488a969d7535fdb417a4946f1f302dc87e481a803233037dd0a00b843d8d4ac6291cddce9c2a910eeefbf8b745c72643acad10590d21b58c48af5728306c28bec442c1cf9f089057dd5023d625fc6d76b680afa0e3a7d6b9ee38db5e0b1dc48e27c90d21aa2318747ab393cd48f7c102d16e56c2406b76f39de8500cc1c982110edd9822b96a631907f51f25a8292731125d187c4b1440c7dc1750a982223f09eb21be4d3aab6daea0ce8c36e86d96d904de0289da8936b6fa6713274a08b95dec226959da2b8462e588434cfd8c3af3d59fc163ef9cb356d33d0c9848443b727c51f40ac521943e839e7ce8463c518d8ad50a825b36021242c9247b955785c39a67f323ba3e9b9ff359a555caa0b5f08d7b55fb7895fecb91212a73915bc8fa88e2c33ba30a30e30b747d226f18b0fcc657043961336f397a9ea0cd5a77e288dff95ef19415f257cabc1fd155b668466b18d6765496f44d7ac03c494592222813ed6e802bb5cfab431b5af30945b9f4a68591175f191a3c5dd2d77d5cd73d216af63c1a84ebd0cb41035a2af20971207a9e49fd8ea2c08fc833c751c565b32537797e158f33044e5c6ec1db52847d7dd7cc6043190cef9c74965748899dfa3e247a3192b2dfa903bf5069a851b752ddf5df7a78a238a2f97dac40e15ef2e82106092153c0b22c6eb2d15f1a33eec64752f6add89b307a69dc37d1a875026dfe27a942f967cf17b3893bb717200e45bb6e6754038f39fd5d8f3bdb16539098154f38082c29a7b68ba3715143ce650f932b5b4b85b90d1568de7b5487a872f5ca919959e11d53544a80b1463db3fd13543ec11f578aa850e34566941e559f7e6a9cc239b19d0ceeed3b59d8d979130ac8147a0436f59ea2c5b5a2f443c447f945e0515893b5604f159576ed8e90051e1fb9d70f73e5dfb51c8ddd71a631f1cd19db51f7a8c9b080e9382bc94349648f5a728875fcecb352d38fcc8c02deacd62f3e0ec85daaa7947dc700f650a9a1b7e501e4c8134da15f77aae677f0faf8c4938d3a7ed4438c97b71b2de0aa09cfbe558745c2050f0a659b5bd2dcd7569238579508a3b8f7b7fff4c4bd75ff2f659f02e93cf7082c5f237fa5bb3b4f5d3c00c8fa0c2ed4e767aa6b29bfd96c5cf27c0f94d931403e3a27ec6028e7cd56cf01020631109b0b53b9aad622b4e42165632281a53d317db573a80c2c7ea7ee4eb96fc212195a3b67887702a314116281c7d8159e1fea7e2a29207074e89817874745f3ada4d6e841dc3443523b393fc4e379e22b1dd5c8c9d4e97ee65b4547b7d886ef4bcbb96fe8ae42786f8bc0b0670e1e3a1c7fdc674e8aad14b30fe5bc1efbb800d784c1a5269b1f6e8c0135ad582dbcf5286a5e44edd6e2a566de0986cd38e781767b378b8d4b52fe6442400d755ef673267631047086ce4690155fd53241f1c6ebbb5338cbb6270a2ef9da2a5aa491c998ac57e8adc7ee77ce427adba80d76bc6eb97d74058dc85ed4fe5e2ef30e6f090cb78b6dca19b7291c25176111b547f79ae2d97af4e408fc6e27fcb3495febfd0811bfb0c66bde3fb39e8d5b400ece6e275972ac652129b6de45a5d6029993718498c9e12cfa79c3cede8756f18a5607a362dfadc5c2059562a2da49aea42506b4ab05f680a5401bc6d7db199a8c149fb6e1a2ceb40941b46d68626ee548375fca0f143ba26fec2d9fe748683b4f8b6e0ea73e124acac86b7c7e607dc454243b43561da2cc848909e06e43e54666044d520eb562a15cdb27d07901df6805c6efd04e7fcb5942730a08895f1ab6c6810e1a0f94d97a17f2931ef8df0d76465bd1234fa3e4bacfdb45497b960a5f4323f6fbbe10bd93da8622503248b3248c007efd9183b7f683b0d9704b2f0763df02466d7c048c540a9715f520c86373378b5c14e83bd5622b7e410567126d2614970099e4e28d93e57ec2a8050f59696a6a3347dd73b47da69d321ee7487e416289a1ae3b9630235459d17e331aaddf47b18b3d277c19917d670e5a8bd4c828c3c5754bdb5525f0fcd981dfc48ead0c764f101bcbd7911331147ed9dd51904ee57827c1acf3ebce2e10d0802ff1ee1627b83d0bb0eef8e30d6571bf3f43e1771f62ca3a870cc79ad685352f3d7a713d4cfa58f31d438654b5c201300e65bafb333cbbd85a65d9a07d2c03fcf1f1806b305b5760b03761c2c9d83c8fc174268e6e0154d20d493d541af4d64e4e3c54262501d84e6a1d0feea8cd174d1041e315cca0660664b8146e915fc309ff7a3aa3929e4fc30d5819b72505dbe9f3cc216b0c9eda69107ef18ee472fad9de95029736ac5d4cabba9d3eecec9b2aa8ba09f9a25b3e331fa07637a80edb7b3a16fb33c4fca8788db4cf7f622309d3c7fdf58fab4c651f9015ee3b7abba17cb6b3b4f5aa3a1c4454fee29af300b13c351e79af230737afff61b10fe022212eb87c6bb6b9347fc9da27a4b41717e02e25b4daf79ccfd4eac2e4505d7034ed7b08b093592a12f156e58d6bff030ea5ed45dfe405a5084f1ce689b0883ace266394324ef227b1341b46bcef909850f3d60cea3a75fba4f9e146326f92bf4675a81e5310bed9eaa40edfa2e71dfd8f9c2819f28f112fef969f677da90c1cb96e2f60209cc3fd9252843429ddd36a26226ff2397a3176c38f06d8d998768102f7a0d6fdffff9c343faa376d06376ace5f21f2d83b826a140fe3949bab7e6e7e18f730274beb77ec550158f990bb20351fc5f1bfa98f3a18a89bc54de51b29927362275e00e1f25fa21c6a85bdca5bf3e443732cd85797d5cbc8dfc39066142f07d00aa3bde011cd1eec89ba66154f4666fabec440d91045f993162fe56c67aba98d3a9423f95fa2b5a91e5ba38d309c68272db0e53782f330415f1839518518e20e4d1d1355551968396cb78b861573fb0f5915e749ed0eda1b53b19cad040b3831d1c65e4d406a00f48da8b9b65770e8015a28336ceb149613e3ba56bf56fa5b8663b6e0bd4b7fb73234f773487bc51a413a2a8f9adb72bc7a0560d48880b057552955b6d034ddb4e24dce6b8df14b1d3e530bf98dc35d672f1a41b62b6fe969c8308f95d6e12d14095ba462df1ebbdbd9bc35256ee942229698a41a6c8b92a9d50a43f0f91bee147641f831c8b9ea1fe2bd0a4d5c3a7c15d6848e2d8cf1a8d41f2f9a93ae325791c3bacc6bb43942ce547811fbd56458424b14763a3de453b8f47bd921daea78910fb63b0cf7ec98a8ffaabaa41ff6ea9d4f533be53da158ca065e8a9a3f03661a5f99c4ea3c23e5df3f0cdc267a997a47d961ee51e74cfb999b9dca5b66732d6faf70d4191d1df365670c25b91c56dd5d0343d16384c9f3a69f26d461d13f635f02cd44f210ca300f5586fb65e217f1cb1adf0ab7a647077a1f530c3581c5d9114fb45e35c91302272471b146011d38e94d80d0b19fb5c53e1cf8a603b0237a05d98d2c54a9405741949ae966d7dc3a0f01cd1458c35dc206ee9c73064f923cf225dfe67c06a15b5f0ea9a8ab4f49a7a54ef4098c884f65b5cc825d8a2051f4d3518f0e1b9d5cacdc0dafa37976d4552da5c6fa54b7e5730a1f4992aba0dc7fdd9ea98d07f0379829fc438e79b07179565a42848c88b639cd9ab45a803de46f7d6ab1f3af027cecf0a409f523f0a68e5fc12eeb8df71c50cfcd75576c034abc62e9427124a371056655480d02a5423509d2f65b1d9a8472a179c9cfd8a01ae8c05208cc01cfe9b8e9a3f4e614091dcd3c448af25cb34d5b73398660c5f80a6fdd6d26d08f6f31ea415e40642408fa050423ebb77d43197dcfbaedd84457a4158f3eed46</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>最近的一些事情与想法</title>
    <url>/2020/10/17/some-puzzles-in-these-day/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b047a1678b22afa32333c546a0ebb299483f6997d545acc01ebd6ed549c660bf">dc539cac4ab894d5e83acb08e14db5a37910aac42c87a9297688307e645ec0e274a1b13d452ed1c0aaff93a9c74375ec43518e548ec4917cf8d1d53f02418d9e82afd5d81d55eeb85260fd8eb0a4d9c8af608ec3c690c59a2e357bf2eb84afc2afd7f7bcee0c9faedacba14f62ae6633573c46981a964260763ca38544a3c69e5cfd1f8fa62aa84c846d2837dbcfdf8a73d9c0f1fc1b4e0c9d6cea1deb28c3617fee88fe3b50aecb4bd349ff7b4f5d4a533959d972981fecec0391e0487599fa7d163feff937fb91662709e4366c25a9ed7dc0d92aecaa7ab0990c26ed6d54270046ec015889949df922e33f50fc9594037522a1d41fc02c41fe8c04ac6f7497e8bd46f6973a4bd3e584ec29906308c1f51f375bcc1543974d93e8fef0dd1496537ffd4ce6b97aa9102eae645f11b9c1e6f9b820b56d70e6ee0abc1acf9457f50428acd03134b6646c955802d8bf00c24138d53728255927f957133fb9d75c25ce5d93e3754002d02fcc1bfba09503cb5318ffe2e9fecd69866b577f9cdff1ec7211f6e0973863465abfd37faefb16569e8bc848894e62daa29ef3c6d53289748ecd0705a95f7d4b04bd5181ef9fa348072c8afb70ce44fa05495817085d71ceb24061e6239eebd5d1f85c671236adfec838dd75942982d80f193d35e85199205705094d2ed036c6d00e35cc8068330df9ad9734b1a3456e624c11b5d5c4329cf9fa401fea49548b1863e52093bed37cc51ec6ac71870e847faf8247d83e79e10b524a73a5a121b78ce226809cd3e8714fbd427b36718b3c0a1c8d083f3637f8dff3b823cf3096dff9d13a6d359d747b2c502dbf8c59a88d0713760a6d01654a341663a6a402e42d86d3a4394a21bd132988b789420eeb25579dbb6b574d29d7341b6ab1aa79c18f91edc95a442256b068f69f7737804150e460863590e9b235f792675c7eb081b714bd28530b84f324875abcfc0acf3e9fc4d6afc83926ea01b2fa04e179839c1c9990fb7b70838c27e3c1e73d82b0f77a58af033685559caf5697d3034f9ce3eea079f36fb439ada60717658d149af3765e5ee7548fb040b7ba7dcc2641df62da74aee6ee0e95724a2b1e5677a928121686a9e7e670422da9ec5cf7411d9ce213902630a4790dbdf50d7369c8c6bc9e6fcd4c922204861ca3a725ef7384cba4eafcb3e4518ed98a2ede42ad627b58f3eb5c80932f12c014b0e7369ab4ff21c6bd0910ce28165c0408c984eb3bc4587138b177b06594e7aef081fa40ed379c077193eafaeab83477c330c4e19e90463bc4c16e81ca3bc289fc94f005be1147d0b9fc0022e63dd69dbecc8d9459286e9e7a1cc02240e3a7beb432c527d5c62a596ab31156f869c04512d68c79e6647102bc72ffeb5f4d7033e0c36dca234052beaabea59f951408ce89380342a784d81fe83092503017b095944018a6afc35f9cf194d85e610a73059e054c036e74eede76fb95bb52eda19d0fb647c310b476b69255b860b8239f5301ef6d8137a961586a70892a79fbb5b8980bcda802a5976d9b6b727c6d134a9cd9a07a7a65a612068ebb02612b45660980c59f356fd9d5e1cf3a2f825b75c857691c2b2482836877dcac0f668821003889817a2daa29b4ae3a96f91c2dc60ccfc1469080fa854702a8bfe6ae1138ef197f98e917727f986566504f47c47529770d13fb937bb1e82e3aba54337c7765ae6a543deadedd161be8f7cafd32d3effc2494d0ee07ebc6b2c5e0893fa826103638bff8a99ec17c0ccee971ab1a56ec3d2af8c13a4cb6e3b922a4daaca3493f30e83e552d565b4504df11ea050ef90f6f95355d1d3957e82d7160fdd5078bdd8b355b2eea73907a0655bee94edad846853e7cca1b0d3b8cf1e8babfd191c5f3b30203996c6fbfcc6308473fed69336378b4c53c2e67302fbb54a0a502eefc711dd1bf85a50e2f039d95e7f6281873b62cf302550d2851ccf560dfa940f6e87f57bf34ecdb56024d6a242f8bbf8f34472400a493d21b5fb0b89456ab5981a989a7f788575348a25836ffb262aebe02d0e5a64c5565dcc4aa2a7bb7a5019ff0fd634788209dcd249955352d35deda0872f4c91e785815d058f7eccfcf83700cfe639cbd8628a0ae56daea3ecb2662318fc10e19f877cb3bec27a096b9d4ff97a13e4e14208562b7d7b1057be5cbb0321334037651fe570f6f7524c17cbf08cb20f5d27b3e6fe67e4164125df37711268d51b437dec88c2ea59d4cd670fe59996057773738cd17637968505081bec45c2159833c85e7af9146571509da9334250ca67f54a0397f99e7283e3599458719fe12e77677d3f44083dfb6e31a574ba7846edbe678d1e1c7a43b9c60033093e73652fb361a7ec43641cd021f23c292612310c2047b7a70e525906566f5989304792b14bb9a2c3c2d7563be7c651db7a71798ca779df0c084b0cc2f8e4521937ce2fc168d325af4c21136556f9b6afbd49ef350</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>大一总结以及未来的规划</title>
    <url>/2020/07/20/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>时间过的真是很快，特别是在家混了一个学期，大一就这样过去了，也是很久没有写博客了，趁着最近心情不是很好 <del>打游戏总是输</del> ，就写一下大一学了什么吧。</p>
<a id="more"></a>
<h3 id="入学">入学</h3>
<p>暑期时，我有看了<strong>一点</strong>翁恺老师的c语言教程，入学时还算有点基础吧（只是看到for循环好像）。军训结束后<del>想起来军训过的还是很开心的，虽然太阳很大</del>，我们学院的王立斌老师来介绍他组织的图灵班。第一节课去的时候，讲的是输出格式化，这个还算听的懂吧。结果第二节课就直接讲起了指针和二级指针，听得我一头雾水，交作业也要求要用函数<del>那时候我连什么是函数都不知道</del>，后面还是退出了，只要是因为我学得太慢了吧。</p>
<h3 id="大一上的一些课程">大一上的一些课程</h3>
<p>大一上学期最难的应该是线代吧，我直到期末才有点懂得线代的用处，结果现在又忘了，以后再找机会二刷吧。编程方面主要就学了c语言吧，看的是谭浩强的书<del>这书真的不行</del>，而且我要吐槽一下，我们学院教的也太慢了吧，练指针都还没教，没有那种逼着我们跑的感觉，所以我学的也很慢，不过我倒是自己看了一部分的数据结构，那时候对指针理解不够，所以看到二叉树的遍历就看不下了，现在好多也忘了，学了就忘是真的烦😥。上学期算学的很少吧，参加了很多比赛也都没有拿奖，真的挺伤心的，感觉我主要的原因是很难静下心来，学着学着就想跑出去玩，所以上学期坐了几百块的地铁，而且什么都想学，又只学了一点点，就搁置了，因为又有其他的事情需要去做。比如上学期参加了ctf新生赛，算是一个人参加的吧，忙活了几天后，没有拿奖，真的那时候我什么都不懂，然后比赛结束后，我也没有继续学习了，就把本来通过这次比赛学的<strong>一点点</strong>知识也扔掉了，害！我感觉这是一个很致命的问题，学习一个知识后，应该继续深入学习，然后再与现阶段学习的内容贯通，最后能够做点东西出来，才算有用吧。</p>
<h3 id="寒假">寒假</h3>
<p>寒假时，刷了很多acm的题，接触了挺多算法的，已经能熟悉的用深搜了，也开始学习动态规划了，但是后面一开学，我又开始搁置了<del>接受不了.jpg</del> 。现在算是又忘的差不多了吧，老毛病了，感觉要每天都做一些才能不忘记，不然真的挺容易不想继续，就慢慢搁了，因为每天都会有各种各样的事，而且我也挺懒的哈。寒假还学了一下小程序，也是学得差不多就搁置了，不过我找到了一个<a href="https://www.bilibili.com/video/BV1sx411z77P?from=search&amp;seid=6116369401220262130">非常好的教程</a>，算把小程序的怎么开发讲得非常好了，结合微信开发文档，如果以后要开发我还是很有信心做好的。</p>
<h3 id="大一下">大一下</h3>
<p>这学期算学了很多内容吧，高数下比上难了好多，学了C++面向对象，也做了一个很多行的大作业，C++算学的还可以，只是对C++11还不是很掌握，本来打算暑假继续学习C++的，现在也不知道要往什么方向学习，害。这学期算学得不多吧，还在一个打基础的阶段，等离散跟概率论都学完，我就会加快步伐的。</p>
<h3 id="接下来的安排">接下来的安排</h3>
<ul>
<li>准备数学建模</li>
<li>继续学习《算法导论》</li>
<li>c#图像识别入门（申请的项目要求的）</li>
<li>下学期可能会申请当兼助，做点有意义的事</li>
</ul>
<p>下次再来写写最近的感悟，不涉及技术方面的。</p>
]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>离散数学复习</title>
    <url>/2021/01/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="图论">图论</h3>
<ul>
<li><p>零图：<span class="math inline">\(E = ∅\)</span>，即只有顶点，没有边的图。</p></li>
<li><p>平凡图：只有一个顶点（也称<span class="math inline">\(1\)</span>阶图）的零图。</p></li>
<li><p>悬挂顶点：度数为<span class="math inline">\(1\)</span>的顶点；悬挂边：与悬挂顶点关联的边。</p></li>
<li><p>在无向图中，图的最大度：<span class="math inline">\(∆(G)={d(v)|v\in V}\)</span>，其中<span class="math inline">\(V\)</span>表示顶点集，<span class="math inline">\(d(v)\)</span>表示顶点的度数，记住用<span class="math inline">\(\Delta(G)\)</span>去表示最大度；同理图的最小度的定义易得，注意的是我们用<span class="math inline">\(\delta(G)\)</span>表示图的最小度。另外无向图用<span class="math inline">\((v_n,v_m)\)</span>表示边。</p></li>
<li><p>在有向图中，<span class="math inline">\(v\)</span>的入度<span class="math inline">\(d^+(v)\)</span>，<span class="math inline">\(v\)</span>的出度<span class="math inline">\(d^-(v)\)</span>，<span class="math inline">\(v\)</span>的度数<span class="math inline">\(d(v) = d^+(v)+d^-(v)\)</span>，同时有向图还定义了出度、入度的最大度和最小度。有向图用<span class="math inline">\(\langle v_n,v_m \rangle\)</span>表示边。</p></li>
<li><p>握手定理：图的所有顶点的度数之和等于边数的<span class="math inline">\(2\)</span>倍，因为每条边都提供<span class="math inline">\(2\)</span>度，所以度数之和一定是偶数。</p></li>
<li><p>度数列：<span class="math inline">\(V=\{v_1,v_2,...v_n\}\)</span>，<span class="math inline">\(G\)</span>的度数列：<span class="math inline">\(d(v_1),d(v_2),...,d(v_n)\)</span>。</p></li>
<li><p>简单图：既无平行边也无环的图称为简单图。其中平行边的条数称为重数。</p></li>
<li><p>完全图和正则图：无向完全图，记作<span class="math inline">\(K_n\)</span>，边数为<span class="math inline">\(n(n-1)/2\)</span>，有向完全图，边数为<span class="math inline">\(n(n-1)\)</span>；<span class="math inline">\(k-\)</span>正则图：每个顶点的度数均为<span class="math inline">\(k\)</span>的无向简单图。</p></li>
<li><p>子图：生成子图：<span class="math inline">\(V&#39; = V\)</span>且<span class="math inline">\(G&#39;\subseteq G\)</span>；<span class="math inline">\(V&#39;\)</span>的导出子图，以两端点都在<span class="math inline">\(V&#39;\)</span>中所有的边集的子图，记作<span class="math inline">\(G[V&#39;]\)</span>；<span class="math inline">\(E&#39;\)</span>的导出子图：以<span class="math inline">\(E&#39;\)</span>所以关联的顶点为顶点集的子图，记作<span class="math inline">\(G[E&#39;]\)</span>。</p></li>
<li><p>通路：<span class="math inline">\(Γ = v_0e_1v_1e_2...e_lv_l\)</span> ，称<span class="math inline">\(Γ\)</span>为<span class="math inline">\(v_0\)</span>到<span class="math inline">\(v_l\)</span>的通路，<span class="math inline">\(l\)</span>为通路的长度，若<span class="math inline">\(v_0=v_l\)</span>则称$Γ <span class="math inline">\(为回路。若通路（回路）中所有顶点（对于回路，\)</span>v_0=v_l$）各异，称此通路<strong>初级通路（回路）</strong>；若通路中所有的边各异，则称为简单通路。初级通路是简单通路，反之不然。</p></li>
<li><p><span class="math inline">\(Γ\)</span>的表示方法 ：用顶点和边交替序列、用边序列、简单图中用顶点序列。</p></li>
<li><p>连通分支：设<span class="math inline">\(R\)</span>是<span class="math inline">\(G\)</span>中顶点之间的连通关系，按<span class="math inline">\(R\)</span>可将<span class="math inline">\(V(G)\)</span>划分为<span class="math inline">\(k\)</span>个等价类，记作<span class="math inline">\(V_1,V_2,...,V_k\)</span>，由他们的导出子图<span class="math inline">\(G[V_1],G[V_2],...,G[V_k]\)</span>称为<span class="math inline">\(G\)</span>的连通分支。令<span class="math inline">\(p(G)=k\)</span>表示<span class="math inline">\(G\)</span>的连通分支数为<span class="math inline">\(k\)</span>。</p></li>
<li><p>点割集与边割集：若<span class="math inline">\(V&#39; \subset V\)</span>，<span class="math inline">\(p(V-V&#39;)&gt;p(V)\)</span>，且<span class="math inline">\(\forall V&#39;&#39; \subset V\)</span>，<span class="math inline">\(p(V-V&#39;&#39;) = V\)</span>，则称<span class="math inline">\(V&#39;\)</span>为<span class="math inline">\(G\)</span>的点割集，若点割集只有一个点，则称此顶点为割点；同理可以得到边割集的定义，若边割集只有一条边则称此边为割边或桥。</p></li>
<li><p>点连通度和边连通度：记<span class="math inline">\(min\{|V&#39;| \space | V&#39;\)</span>是<span class="math inline">\(G\)</span>的点割集<span class="math inline">\(\}=\kappa(G)\)</span>，称为<span class="math inline">\(G\)</span>的点连通度；记<span class="math inline">\(min\{|E&#39;| \space|E&#39;\)</span>是<span class="math inline">\(G\)</span>的边割集<span class="math inline">\(\} = \lambda(G)\)</span>，称为<span class="math inline">\(G\)</span>的边连通度。对于任意的无向图有<span class="math inline">\(\kappa(G)\leq \lambda(G)\leq \delta(G)\)</span> 。</p></li>
<li><p>二部图判别定理：无向图<span class="math inline">\(G=\langle V,E\rangle\)</span>是二部图当且仅当<span class="math inline">\(G\)</span>中无奇数长度的回路，记作<span class="math inline">\(\langle V_1,V_2,E\rangle\)</span>。二部图还有一个非常重要的匹配问题，匹配就是<span class="math inline">\(E&#39; \subseteq E\)</span>，且<span class="math inline">\(E&#39;\)</span>中的边互补相邻，注意极大匹配，最大匹配，完备匹配，完美匹配等问题。</p>
<a id="more"></a></li>
<li><p>完备匹配判定定理$(|V_1||V_2|) <span class="math inline">\(：(Hall定理)，存在\)</span>V_1,V_2<span class="math inline">\(的完备匹配当且仅当\)</span>V_1<span class="math inline">\(中任意\)</span>k(1k|V_1|)<span class="math inline">\(个顶点至少与\)</span>V_2<span class="math inline">\(中\)</span>k<span class="math inline">\(个顶点相邻；（t条件）：如果存在正整数\)</span>t<span class="math inline">\(，使得\)</span>V_1<span class="math inline">\(中每个顶点至少关联\)</span>t<span class="math inline">\(条边，而\)</span>V_2<span class="math inline">\(中的顶点至多关联\)</span>t<span class="math inline">\(条边，则\)</span>G<span class="math inline">\(中存在\)</span>V_1<span class="math inline">\(到\)</span>V_2$的完备匹配。</p></li>
<li><p>无向图关联矩阵：<span class="math inline">\(m_{ij}\)</span>为<span class="math inline">\(v_i\)</span>与<span class="math inline">\(e_j\)</span>的关联次数；无环有向图关联矩阵：<span class="math inline">\(m_{ij}=-1,0,1\)</span>，<span class="math inline">\(1\)</span>代表是起点，<span class="math inline">\(-1\)</span>代表是终点；关联矩阵记为<span class="math inline">\(M\)</span>。 有向图的邻接矩阵：<span class="math inline">\(a_{i,j}\)</span>为以<span class="math inline">\(v_i\)</span>为起点，<span class="math inline">\(v_j\)</span>为终点的边的条数，记为<span class="math inline">\(A\)</span>。<span class="math inline">\(A^l\)</span>中元素表示长度为<span class="math inline">\(l\)</span>的边的条数。 可达矩阵：<span class="math inline">\(p_{ij} = 0,1\)</span>，<span class="math inline">\(1\)</span>表示可达。</p></li>
<li><p>欧拉通路：经过所有顶点且每条边恰好且经过一次的通路。无向图具有欧拉回路当且仅当<span class="math inline">\(G\)</span>是连通的且无奇度顶点，无向图具有欧拉通路当且仅当图是连通的且只有两个奇度顶点。有向图具有欧拉回路当且仅当<span class="math inline">\(G\)</span>是连通的且每个顶点的出度等于入度，具有欧拉通路当且图中有一个顶点<span class="math inline">\(d^--d^+ = 1\)</span>，有一个顶点<span class="math inline">\(d^+-d^-=1\)</span>，其他顶点的出度等于入度。</p></li>
<li><p>哈密顿通路：经过图中所有顶点一次且仅一次的通路。 必要条件：若无向图是哈密顿图，则对于<span class="math inline">\(V\)</span>的任意非空真子集<span class="math inline">\(V&#39;\)</span>，均有<span class="math inline">\(p(V-V&#39;)&lt;|V&#39;|\)</span>,推论，有割点的图不是哈密顿图。 充分条件：若<span class="math inline">\(G\)</span>是<span class="math inline">\(n\)</span>阶无向图，<span class="math inline">\(d(u)+d(v)\geq n-1\)</span>，<span class="math inline">\(u,v\)</span>为<span class="math inline">\(G\)</span>中任意不相邻点，则<span class="math inline">\(G\)</span>中存在哈密顿通路；若<span class="math inline">\(d(u)+d(v)\geq n\)</span>则<span class="math inline">\(G\)</span>中存在哈密顿回路。</p></li>
<li><p>基本回路系统：设<span class="math inline">\(T\)</span>是<span class="math inline">\(n\)</span>阶<span class="math inline">\(m\)</span>条边的无向连通图<span class="math inline">\(G\)</span>的一棵生成树，设<span class="math inline">\(e_1,e_2,...,e_{n-m+1}\)</span>为<span class="math inline">\(T\)</span>的弦，<span class="math inline">\(C_r(r=1,2,...,m-n+1)\)</span>为<span class="math inline">\(T\)</span>添加弦<span class="math inline">\(e_r\)</span>产生的<span class="math inline">\(G\)</span>中由弦<span class="math inline">\(e_r\)</span>和树枝构成的圈，称<span class="math inline">\(C_r\)</span>为<span class="math inline">\(G\)</span>的对应弦<span class="math inline">\(e_r\)</span>基本回路或基本图，称<span class="math inline">\(\{C_1.C_2,...,C_{m-n+1}\}\)</span>为<span class="math inline">\(G\)</span>对应<span class="math inline">\(T\)</span>的基本回路系统，称<span class="math inline">\(m-n+1\)</span>为<span class="math inline">\(G\)</span>的圈秩，记作<span class="math inline">\(ξ(G)\)</span>。</p></li>
<li><p>基本割集系统：设<span class="math inline">\(T\)</span>是<span class="math inline">\(n\)</span>阶的无向连通图<span class="math inline">\(G\)</span>的一棵生成树，设<span class="math inline">\(e_1,e_2,...,e_{n-1}\)</span>为<span class="math inline">\(T\)</span>的树枝，<span class="math inline">\(S_i(i=1,2,..,n-1)\)</span>为由树枝<span class="math inline">\(e_i\)</span>和弦构成的割集。称<span class="math inline">\(\{S_1,S_2,...,S_{n-1}\}\)</span>为<span class="math inline">\(G\)</span>对应<span class="math inline">\(T\)</span>的基本割集系统，称<span class="math inline">\(n-1\)</span>为<span class="math inline">\(G\)</span>的割集秩，记作<span class="math inline">\(η(G)\)</span>。</p></li>
<li><p>平面图与平面嵌入：如果能将图<span class="math inline">\(G\)</span>中除顶点外边不相交地画在平面上，则称<span class="math inline">\(G\)</span>是平面图，由这个图画出的无边相交的图称为<span class="math inline">\(G\)</span>的平面嵌入，没有平面嵌入的图称为非平面图。</p></li>
<li><p>平面图的一些概念：无限面，用<span class="math inline">\(R_0\)</span>表示，有限面，用<span class="math inline">\(R_1, R_2, ..., R_k\)</span>表示，面<span class="math inline">\(R_i\)</span>的次数，<span class="math inline">\(R\)</span>边界的长度，用<span class="math inline">\(deg(R_i)\)</span>表示。 平面图各面的次数之和等于边数的<span class="math inline">\(2\)</span>倍，一条边或者是<span class="math inline">\(2\)</span>个面的公共边界，或者在一个面中出现两次，特别要注意的是这种出现两次的情况，这种边应该只会在无限面中出现，所以在写无限面的边界时也应该注意，这条边要写两次。</p></li>
<li><p>极大平面图：在简单平面中任意不相邻的顶点之间加一条新边所得的图为非平面图。极大平面是连通的，且设<span class="math inline">\(G\)</span>为<span class="math inline">\(n(\geq3)\)</span>阶简单平面图，<span class="math inline">\(G\)</span>为极大平面图的充分必要条件是，<span class="math inline">\(G\)</span>的每个面次数均为<span class="math inline">\(3\)</span>。</p></li>
<li><p>欧拉公式：设<span class="math inline">\(G\)</span>为<span class="math inline">\(n\)</span>阶<span class="math inline">\(m\)</span>条边<span class="math inline">\(r\)</span>个面的连通平面图，则<span class="math inline">\(n-m+r=2\)</span>。 欧拉公式的推论：设平面<span class="math inline">\(G\)</span>中有<span class="math inline">\(p(p\geq 2)\)</span>连通分支，则<span class="math inline">\(n-m+r=p+1\)</span></p></li>
<li><p>同胚与收缩：<span class="math inline">\(G_1\)</span>与<span class="math inline">\(G_2\)</span>同构，或经过反复插入或消去<span class="math inline">\(2\)</span>度顶点后，称为同胚。收缩边称为收缩。 库拉图斯基定理：一个图是平面图当且仅当它既不包含与<span class="math inline">\(K_5\)</span>同胚的<strong>子图</strong>，也不含与<span class="math inline">\(K_{3,3}\)</span>同胚的子图，一个图是平面图当且仅当它既无可收缩为<span class="math inline">\(K_5\)</span>的子图，也无可收缩为<span class="math inline">\(K_{3,3}\)</span>的子图。</p></li>
<li><p>对偶图的性质：设<span class="math inline">\(G^*\)</span>是连通图<span class="math inline">\(G\)</span>的对偶图，<span class="math inline">\(n^*,m^*,r^*\)</span>和<span class="math inline">\(n,m,r\)</span>分别为<span class="math inline">\(G^*,G\)</span>的顶点数，边数，面数，有<span class="math inline">\(n^*=r,m*=m,r^*=n\)</span>，设<span class="math inline">\(G^*\)</span>的顶点<span class="math inline">\(v^*_i\)</span>位于<span class="math inline">\(G\)</span>的面<span class="math inline">\(R_i\)</span>中，则<span class="math inline">\(d(v^*_i)=deg(R_i)\)</span>。</p></li>
</ul>
<h3 id="代数结构">代数结构</h3>
<ul>
<li>积代数：设<span class="math inline">\(V_1 = \langle S_1, \circ \rangle, V_2 =\langle S_2, *\rangle\)</span>，<span class="math inline">\(V_1\)</span>与<span class="math inline">\(V_2\)</span>的积代数<span class="math inline">\(V=\langle S_1\times S_2,\cdot\rangle\)</span>，<span class="math inline">\(\langle x_1, y_1 \rangle,\langle x_2,y_2\rangle \in S_1\times S_2\)</span>。<span class="math inline">\(\langle x_1, y_1 \rangle\cdot \langle x_2,y_2\rangle\)</span> <span class="math inline">\(=&lt;x_1\circ x_2, y_1*y_2&gt;\)</span>。</li>
<li>设<span class="math inline">\(G=&lt;a&gt;\)</span>是<span class="math inline">\(n\)</span>阶循环群，则对<span class="math inline">\(n\)</span>的每个正因子<span class="math inline">\(d\)</span>，<span class="math inline">\(G\)</span>恰好有一个<span class="math inline">\(d\)</span>阶的子群。</li>
<li>设<span class="math inline">\(G=&lt;a&gt;\)</span>是循环群，若<span class="math inline">\(G\)</span>是无限循环群，则<span class="math inline">\(G\)</span>只有两个生成元，即<span class="math inline">\(a\)</span>和<span class="math inline">\(a^{-1}\)</span>。若<span class="math inline">\(G\)</span>是<span class="math inline">\(n\)</span>阶循环群，则<span class="math inline">\(G\)</span>有<span class="math inline">\(\phi(n)\)</span>个生成元，对于任意小于<span class="math inline">\(n\)</span>且与<span class="math inline">\(n\)</span>互素的自然数<span class="math inline">\(r\)</span>，<span class="math inline">\(a^r\)</span>是<span class="math inline">\(G\)</span>的生成元。</li>
<li>子环判别定理：设<span class="math inline">\(R\)</span>是环，<span class="math inline">\(S\)</span>是<span class="math inline">\(R\)</span>得非空子集，若<span class="math inline">\(\forall a, b \in S\)</span>，<span class="math inline">\(a-b\in S\)</span>且<span class="math inline">\(\forall a,b \in S，ab\in S\)</span>，则<span class="math inline">\(S\)</span>是<span class="math inline">\(R\)</span>的子环。</li>
<li>如果<span class="math inline">\(R\)</span>既是交换环、含幺环、无零因子环，则称<span class="math inline">\(R\)</span>是整环。</li>
<li>域：若<span class="math inline">\(R\)</span>是整环，则对<span class="math inline">\(R\)</span>中的每个元素(<span class="math inline">\(\{0\}\)</span>除外)，都有逆元，则称<span class="math inline">\(R\)</span>是域。</li>
<li>格的定义：利用偏序集<span class="math inline">\(\langle S, \preccurlyeq \rangle\)</span>，如果<span class="math inline">\(\forall x, y \in S, \{x,y\}\)</span>都有最小上界和最大下界，则称<span class="math inline">\(S\)</span>关于偏序<span class="math inline">\(\preccurlyeq\)</span>做出一个格。<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>有<span class="math inline">\(\vee, \wedge\)</span>两个运算，其中<span class="math inline">\(\vee\)</span>表示最小上界，<span class="math inline">\(\wedge\)</span>表示最大下届。其中运算<span class="math inline">\(\vee, \wedge\)</span>还要满足交换律，结合律，幂等律，吸收律<span class="math inline">\(a(a\vee b) = a,a(a\wedge b)=a\)</span>。</li>
<li>格的等价定义：设<span class="math inline">\(\langle L,*,\cdot \rangle\)</span>是具有两个二元运算的代数系统，如果<span class="math inline">\(*,\cdot\)</span>满足交换律，结合律，幂等律，吸收率，则称<span class="math inline">\(\langle L,*,\cdot \rangle\)</span>是格。</li>
<li>判断一个偏序集是否构成格：可以判断每两个元素的最小上界跟最大下界是否唯一，如果不唯一则不构成格。</li>
<li>分配格：<span class="math inline">\(L\)</span>是分配格当且仅当<span class="math inline">\(L\)</span>不含与砖石格或者五角格同构的子格。或者当且仅当<span class="math inline">\(\forall a,b,c \in L\)</span>有<span class="math inline">\((a\vee b = a\vee c 且a\wedge b=a\wedge c)\)</span><span class="math inline">\(\rightarrow (b=c)\)</span>。特别的小于<span class="math inline">\(5\)</span>元的格，链都是分配格。</li>
<li>设<span class="math inline">\(\langle L, \wedge,\vee,0,1\rangle\)</span>是有界格，<span class="math inline">\(a\in L\)</span>, 若存在<span class="math inline">\(b\in L\)</span>使得<span class="math inline">\(a\vee b =1\)</span>和<span class="math inline">\(a\wedge b=0\)</span>成立则称<span class="math inline">\(b\)</span>是<span class="math inline">\(a\)</span>的补元。若<span class="math inline">\(L\)</span>是有界分配格，则若<span class="math inline">\(L\)</span>中的元素存在补元，则只存在唯一的补元。若<span class="math inline">\(L\)</span>中所有的元素都存在补元，则称<span class="math inline">\(L\)</span>为有补格。</li>
<li>如果一个格是有补分配格，则称它为布尔格或者布尔代数，记作<span class="math inline">\(\langle L, \wedge,\vee,0,1,&#39;\rangle\)</span>，任何有限布尔代数的元素的个数都是<span class="math inline">\(2^n\)</span>。有<span class="math inline">\((a&#39;)&#39;=a\)</span>，还有德摩根律。</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
  <entry>
    <title>魔兽世界3备战</title>
    <url>/2020/05/13/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>这个题目，我花了差不多4天才全部做出来的，一开始也没很好的设计，就是看见有什么功能，就写一个函数的声明，然后写另一个类的时候，发现我要用到前面写的类的函数时，才去定义相应的函数，所以可能会很混乱。我写这篇文章一是为了重新理一下思路，也希望能给后面设计的人一个想法吧。</p>
<a id="more"></a>
<p>首先我大体上设置了5个类吧，不包括相应的子类，分别是factorial（工厂类）、headquarter（司令部类，其实叫做城市类更好）、time（时间类，用来管理时间和大部分的输出的）、warrior（武士类，这道题中最重要的类）、weapon（武器类）。先从最重要的开始吧。</p>
<ul>
<li><p>warrior</p>
<p>武士有生命值(life)、编号（serial 注意这个编号是从1开始算的，每制造一个武士编号就相应的加一，而且并不会因为删除前面的武士而改变）、攻击力（damage，由司令部决定，但具体的规则不同，可以由不同的子类传进去）、位置（location，用来记录武士现在所在的位置，用于打架与移动）、武器的数量数组（WeaponNum，静态数组用来储存不同武器的数量），名字（用来存储子类不同的名字）colorname（隶属司令部的颜色）、武器（这里使用一个vector数组，放武士拥有的武器）。武士有两个重要的方法一个是抢武器，一个是用武器。</p></li>
<li><p>weapon</p>
<p>武器有攻击力，武器的编号，剩余的使用次数，还有使用string存储它的名字。武器最终要的是ninja武士使用bomb不会自残，我的做法是使用一个使用武器的方法，并把武士作为形参传进来。</p></li>
<li><p>factorial</p>
<p>这个类听从了hhy老师的建议，使用了了静态函数负责制造武士和制造武器，但是我现在的工厂类没有任何数据成员，所以我还是不知道为什么不使用普通的函数，或许可以给工厂多一些功能，比如一个静态成员去记录现在的武士武器编号？？</p></li>
<li><p>time</p>
<p>用于对于处理各种事件并输出，主要要总的输出时间和现在的时间，可以包括小时与分钟，也可以只包括小时。这个类的方法大致于题目不同时刻的事件相同，有制造武士，武士逃跑，武士前进，同一个城市的武士抢武器，打架，司令部报告，武士报告。对于武士我的处理方法是先按司令部全部遍历都前进一步，在根据城市的顺序从左到右输出，或许可以全部由城市来负责。</p></li>
<li><p>headquarters</p>
<p>司令部是继承普通的city类来着，司令部有总的生命值，制造武士的顺序，各个武士的攻击力和所需要的生命（或许这两个就可以放置在factorial类中作为静态成员），还需要一个vector用来记录司令部的士兵。</p></li>
</ul>
<p>类的介绍就差不多是这样了，删除武士删除武器的操作，或许都可以由factorial来实现，把功能给对应的类吧，不过这样好像要写成模板函数了。</p>
<hr />
<p>最后再说一下可能会遇到的一些坑吧。</p>
<p>武士打架时，在奇数城市红方先攻击，偶数城市蓝方先攻击</p>
<p>武器的攻击力会随使用者的改变而发生改变，<strong>所以在抢夺武器时记得要给一个接口去改变武器的攻击力</strong></p>
<p>Wolf的抢夺武器与打赢后抢夺武器是不一样的，wolf只抢劫一种（编号最小的武器），而打赢之后进行的抢劫，所有的武器都能抢。</p>
<p>关于删除武器，武士的erase，erase最好写一个函数，参数传递要删除的对应指针（容器里面放的是指针嘛），erase的参数都是迭代器，推荐使用for循环找到要删除指针对应的迭代器。</p>
<p>注意iceman前进一步损失10%的生命值，表示的方式是<span class="math display">\[life-life*10%\]</span>,而不是<span class="math display">\[life*90%\]</span></p>
<p>移动的输出顺序是按目的地从西向东的，我的做法是先全部移动，再按city输出相应的信息</p>
<p>如果武士用一个数组去存储武器的数量，另外还有如果wolf抢劫了敌人的武器记得把敌人数组的数量减掉，武士的数组加相应的值。</p>
<p>还有一个非常坑的点，在打架时，假如两个都剩余一件sword的攻击力为0，或者有一个没有武器，都会进行入死循环。但是其他两种武器是有使用次数的就每关系。</p>
<p>耳聋咆哮是活下来就要的，不是赢了才。</p>
<hr />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最后附上代码，可能有很多功能没有分离好，导致接口写的太多了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">factorial</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">headquarter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">city</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">warrior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weapon</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">factorial</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//l表示武士的生命，L表示武士的位置，s表示武士的标号，choice确定选择哪一个武士</span></span><br><span class="line">	<span class="comment">//需要的变量哪一个武士,武士的各种信息</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> warrior* <span class="title">creator_warrior</span><span class="params">(<span class="keyword">int</span> choice, <span class="keyword">int</span> s, <span class="keyword">int</span> life, <span class="keyword">int</span> L, <span class="keyword">int</span> total, <span class="keyword">int</span>, <span class="keyword">int</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">creator_weapon</span><span class="params">(<span class="keyword">int</span> attack, <span class="keyword">int</span> seria, <span class="keyword">int</span> num, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt;&amp;d, <span class="keyword">int</span> *)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">warrior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">city</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> location;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt; qwarriors;	<span class="comment">//用来占领存放武士的容器</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	city(<span class="keyword">int</span> l = <span class="number">0</span>) :location(l)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_qwarriors</span><span class="params">(warrior *)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt; &amp;<span class="title">show_qwarriors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> qwarriors;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">city_delete</span><span class="params">(warrior *)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">headquarter</span> :</span><span class="keyword">public</span> city</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> TotalLife;					<span class="comment">//司令部总的生命元</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">7</span>];					<span class="comment">//司令部的名字</span></span><br><span class="line">	<span class="keyword">int</span> makeseq[<span class="number">5</span>];					<span class="comment">//制造武士的顺序</span></span><br><span class="line">	<span class="keyword">int</span> LifeNeed[<span class="number">5</span>];				<span class="comment">//把制造武士所需的生命元也放在类里</span></span><br><span class="line">	<span class="keyword">int</span> WarriorAttack[<span class="number">5</span>];</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt; warriors;	<span class="comment">//用来存放武士的容器</span></span><br><span class="line">	<span class="keyword">bool</span> WheatherCreate = <span class="literal">true</span>;			<span class="comment">//是否可以制造武士</span></span><br><span class="line">	<span class="keyword">bool</span> IsContinue = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> WarriorSeria = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> lionloyalty;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//t是司令部的生命元，arr是制造武士的顺序，N城市的数量 A是武士攻击力数组</span></span><br><span class="line">	<span class="comment">//L是武士的生命值数组</span></span><br><span class="line">	headquarter(<span class="keyword">int</span> t, <span class="keyword">int</span> *arr, <span class="keyword">int</span> m, <span class="keyword">int</span> N, <span class="keyword">int</span> *L, <span class="keyword">int</span> *A, <span class="keyword">int</span> Ly) :TotalLife(t),</span><br><span class="line">		lionloyalty(Ly)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">5</span>; n++)</span><br><span class="line">		&#123;</span><br><span class="line">			makeseq[n] = arr[n];</span><br><span class="line">			LifeNeed[n] = L[n];</span><br><span class="line">			WarriorAttack[n] = A[n];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			name[<span class="number">0</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">			name[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">			name[<span class="number">2</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">			name[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			location = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (m == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			name[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">			name[<span class="number">1</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">			name[<span class="number">2</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">			name[<span class="number">3</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">			name[<span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			location = N + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">getnextMakeValidWarriorKind</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (TotalLife &gt;= LifeNeed[makeseq[warriors.size() % <span class="number">5</span>]])<span class="comment">//</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete_warrior</span><span class="params">(warrior *)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">produce</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_continue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> IsContinue;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt;&amp;  <span class="title">get_warrios</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> warriors;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_totalife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> TotalLife;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_location</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> location;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">char</span> *<span class="title">get_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Been_Token</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		IsContinue = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> TotalTime;</span><br><span class="line">	<span class="keyword">bool</span> is_continue = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> NowTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Time(<span class="keyword">int</span> t) :TotalTime(t)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果是武士的行为就需要引用司令部，武器的行为需要引用武士</span></span><br><span class="line">	<span class="comment">//因为一个司令部有很多武士，一个武士有很多武器</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">create_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">escape_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">forward_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b, city **)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rob_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">fight_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">headquarte_report</span><span class="params">(headquarter &amp;a)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_nowtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		++NowTime;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_nowtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> NowTime;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">warriors_report</span><span class="params">(warrior *a)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weapon</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">warrior</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> life;						<span class="comment">//武士的生命</span></span><br><span class="line">	<span class="keyword">int</span> seria;						<span class="comment">//武士的编号</span></span><br><span class="line">	<span class="keyword">int</span> damage;						<span class="comment">//武士的攻击力</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon *&gt;weapons;	<span class="comment">//用来存放武器的优先队列</span></span><br><span class="line">	<span class="keyword">int</span> location;					<span class="comment">//现在的位置</span></span><br><span class="line">	<span class="keyword">int</span> WeaponsNum[<span class="number">3</span>] = &#123;&#125;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> HqtName;					<span class="comment">//所属司令部的名字,0表示red,1表示blue</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> colorname;			<span class="comment">//没办法了，真的需要这个</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	warrior(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>) :life(l),</span><br><span class="line">		seria(s), damage(d), location(L), HqtName(p)</span><br><span class="line">	&#123;</span><br><span class="line">		name = <span class="string">&quot;warrior&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">			colorname = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			colorname = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt; &amp; <span class="title">get_weapons</span><span class="params">()</span>			<span class="comment">//返回武士的武器，记得使用引用</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> weapons;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">get_name</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">get_color</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> colorname;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_hqt</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> HqtName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_life</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> life;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_attack</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> damage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_life</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		life -= n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_loc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> location;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_seria</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> seria;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_die</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (life &lt;= <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rob_weapon</span><span class="params">(warrior* enermy)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Delete_weapon</span><span class="params">(weapon *)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">gaming</span><span class="params">(<span class="keyword">int</span> times, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_weaponnum</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		--WeaponsNum[s];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sort_weapons</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//第10分时的移动，每一次在headquarters的warriors都用一次</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> warrior*  <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dragon</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	dragon(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">yell</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		       <span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span> <span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		yell(time, city);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ninja</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	ninja(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iceman</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	iceman(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>);</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		life -= life * <span class="number">1</span> / <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lion</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> loyalty;</span><br><span class="line">	<span class="keyword">int</span> K;				<span class="comment">//每一次行走消耗的忠诚度，命名逐渐暴躁</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	lion(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>, <span class="keyword">int</span> k = <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (loyalty &lt;= <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		loyalty -= K;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wolf</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	wolf(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>) :</span><br><span class="line">		warrior(l, s, d, L, r, p)</span><br><span class="line">	&#123;</span><br><span class="line">		name = <span class="string">&quot;wolf&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span> NoWtime, <span class="keyword">int</span> City)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		wolf_rob(enermy, NoWtime, City);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">wolf_rob</span><span class="params">(warrior *, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pair</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> first;</span><br><span class="line">	<span class="keyword">int</span> second;</span><br><span class="line">	Pair(<span class="keyword">int</span> f, <span class="keyword">int</span> s) :first(f), second(s) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weapon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> WeaponDamage;		<span class="comment">//武器的攻击力</span></span><br><span class="line">	<span class="keyword">int</span> WeaponSeria;		<span class="comment">//武器的编号，用于后面排序</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	weapon(<span class="keyword">int</span> d, <span class="keyword">int</span> w) :WeaponDamage(d), WeaponSeria(w) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span> MyDamage)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Pair(WeaponDamage, MyDamage);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_seria</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> WeaponSeria;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		WeaponDamage = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_damage</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> WeaponDamage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;	<span class="comment">//每次使用武器后就调用这个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sword</span> :</span><span class="keyword">public</span> weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Availbleuse = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	sword(<span class="keyword">int</span> d = <span class="number">0</span>) :weapon(d * <span class="number">2</span> / <span class="number">10</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="function">Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="keyword">return</span> weapon::using_weapon(<span class="number">0</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		weapon::change_damege(t * <span class="number">2</span> / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bomb</span> :</span><span class="keyword">public</span> weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> AvailbleUse = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	bomb(<span class="keyword">int</span> d = <span class="number">0</span>) :weapon(d * <span class="number">4</span> / <span class="number">10</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function">Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		--AvailbleUse;</span><br><span class="line">		<span class="keyword">return</span> weapon::using_weapon(get_damage() / <span class="number">2</span>);</span><br><span class="line">	&#125;<span class="comment">//</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> AvailbleUse;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		weapon::change_damege(t * <span class="number">4</span> / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrow</span> :</span><span class="keyword">public</span> weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> AvailbleUse = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	arrow(<span class="keyword">int</span> d = <span class="number">0</span>) :weapon(d * <span class="number">3</span> / <span class="number">10</span>, <span class="number">2</span>) &#123;&#125;</span><br><span class="line">	<span class="function">Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		--AvailbleUse;</span><br><span class="line">		<span class="keyword">return</span> weapon::using_weapon(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (AvailbleUse == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> AvailbleUse;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		weapon::change_damege(t * <span class="number">3</span> / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//life表示武士的生命，L表示武士的位置，s表示武士的标号，可以用choice确定使用哪一个武士</span></span><br><span class="line"><span class="function">warrior* <span class="title">factorial::creator_warrior</span><span class="params">(<span class="keyword">int</span> choice, <span class="keyword">int</span> s, <span class="keyword">int</span> life, <span class="keyword">int</span> L, <span class="keyword">int</span> total, <span class="keyword">int</span> N, <span class="keyword">int</span> *WarriorAttack,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	warrior *ptemp;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="number">0</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> dragon(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> ninja(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> iceman(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> lion(life, s, WarriorAttack[choice], L, total, N, K);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ptemp = <span class="keyword">new</span> wolf(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">return</span> ptemp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//N是武士存放武器的数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factorial::creator_weapon</span><span class="params">(<span class="keyword">int</span> attack, <span class="keyword">int</span> seria, <span class="keyword">int</span> num, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt; &amp;d,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">int</span> *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	weapon * ptemp1;</span><br><span class="line">	weapon *ptemp2;</span><br><span class="line">	<span class="keyword">if</span> (seria % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">		ptemp1 = <span class="keyword">new</span> sword(attack);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (seria % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">		ptemp1 = <span class="keyword">new</span> bomb(attack);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ptemp1 = <span class="keyword">new</span> arrow(attack);</span><br><span class="line">	<span class="keyword">if</span> ((seria + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">		ptemp2 = <span class="keyword">new</span> sword(attack);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ((seria + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">		ptemp2 = <span class="keyword">new</span> bomb(attack);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ptemp2 = <span class="keyword">new</span> arrow(attack);</span><br><span class="line">	<span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		d.push_back(ptemp1);</span><br><span class="line">		++N[seria % <span class="number">3</span>];</span><br><span class="line">		<span class="comment">//在函数里申请空间而不delete也是不会回收的，所以这里要delete ptemp2</span></span><br><span class="line">		<span class="keyword">delete</span> ptemp2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		d.push_back(ptemp1);</span><br><span class="line">		++N[seria % <span class="number">3</span>];</span><br><span class="line">		d.push_back(ptemp2);</span><br><span class="line">		++N[(seria + <span class="number">1</span>) % <span class="number">3</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">city::city_delete</span><span class="params">(warrior *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; qwarriors.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (qwarriors[t] == temp)</span><br><span class="line">		&#123;</span><br><span class="line">			qwarriors.erase(qwarriors.begin() + t);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">city::add_qwarriors</span><span class="params">(warrior *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qwarriors.push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">headquarter::produce</span><span class="params">(<span class="keyword">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (WheatherCreate == <span class="literal">false</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (!getnextMakeValidWarriorKind())</span><br><span class="line">	&#123;</span><br><span class="line">		WheatherCreate = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> N = <span class="built_in">std</span>::<span class="built_in">strlen</span>(get_name()) - <span class="number">3</span>;</span><br><span class="line">		TotalLife -= LifeNeed[makeseq[WarriorSeria % <span class="number">5</span>]];</span><br><span class="line">		warrior *ptemp = factorial::creator_warrior(makeseq[WarriorSeria % <span class="number">5</span>], WarriorSeria + <span class="number">1</span>,</span><br><span class="line">			LifeNeed[makeseq[WarriorSeria % <span class="number">5</span>]], location, TotalLife, N, WarriorAttack, lionloyalty);</span><br><span class="line">		warriors.push_back(ptemp);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; time;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:00 %s %s %d born\n&quot;</span>, name, ptemp-&gt;get_name().c_str(), WarriorSeria + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (ptemp-&gt;get_name() == <span class="string">&quot;lion&quot;</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Its loyalty is %d\n&quot;</span>, TotalLife);</span><br><span class="line">		++WarriorSeria;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">headquarter::delete_warrior</span><span class="params">(warrior *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; warriors.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (warriors[t] == temp)</span><br><span class="line">		&#123;</span><br><span class="line">			warriors.erase(warriors.begin() + t);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::create_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (NowTime * <span class="number">60</span> &gt; TotalTime)</span><br><span class="line">	&#123;</span><br><span class="line">		is_continue = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	a.produce(NowTime);</span><br><span class="line">	b.produce(NowTime);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::escape_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x1 = a.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x1.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x1[t]-&gt;get_name() == <span class="string">&quot;lion&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x1[t]-&gt;is_escape())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;:05 %s %s %d ran away\n&quot;</span>, a.get_name(),</span><br><span class="line">					x1[t]-&gt;get_name().c_str(), t + <span class="number">1</span>);</span><br><span class="line">				x1.erase(x1.begin() + t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x2 = b.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x2.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x2[t]-&gt;get_name() == <span class="string">&quot;lion&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x2[t]-&gt;is_escape())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;:05 %s %s %d ran away\n&quot;</span>, b.get_name(),</span><br><span class="line">					x2[t]-&gt;get_name().c_str(), t + <span class="number">1</span>);</span><br><span class="line">				x2.erase(x2.begin() + t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::forward_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b, city **arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x1 = a.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x1.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> ptemp = x1[t]-&gt;forward(<span class="number">1</span>);</span><br><span class="line">		arr[ptemp-&gt;get_loc()]-&gt;add_qwarriors(ptemp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x2 = b.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x2.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> ptemp = x2[t]-&gt;forward(<span class="number">-1</span>);</span><br><span class="line">		arr[ptemp-&gt;get_loc()]-&gt;add_qwarriors(ptemp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::rob_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span> City)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_name() == <span class="string">&quot;wolf&quot;</span>&amp;&amp;b-&gt;get_name() != <span class="string">&quot;wolf&quot;</span>)</span><br><span class="line">		a-&gt;before_game(b, NowTime, City);</span><br><span class="line">	<span class="keyword">if</span> (b-&gt;get_name() == <span class="string">&quot;wolf&quot;</span>&amp;&amp;a-&gt;get_name() != <span class="string">&quot;wolf&quot;</span>)</span><br><span class="line">		b-&gt;before_game(a, NowTime, City);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Time::fight_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span> choose)</span><span class="comment">//choose是city的编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a-&gt;sort_weapons();</span><br><span class="line">	b-&gt;sort_weapons();</span><br><span class="line">	<span class="keyword">int</span> t1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> t2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">2</span>;				<span class="comment">//-1表示a赢，0表示打和，1表示b赢,2表示都死了</span></span><br><span class="line">	<span class="keyword">while</span> (!a-&gt;is_die() &amp;&amp; !b-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a-&gt;get_weapons().size() == <span class="number">0</span> &amp;&amp; b-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : b-&gt;get_weapons())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (x-&gt;get_damage() != <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//攻击力为0的arrow,和攻击力为0的sword</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;get_damage() == <span class="number">0</span> &amp;&amp; x-&gt;get_use_times() != <span class="number">0</span>)</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : a-&gt;get_weapons())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (x-&gt;get_damage() != <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;get_damage() == <span class="number">0</span> &amp;&amp; x-&gt;get_use_times() != <span class="number">0</span>)</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a-&gt;get_weapons().size() != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> dmg = a-&gt;gaming(t1%a-&gt;get_weapons().size(), t1);</span><br><span class="line">			b-&gt;change_life(dmg);</span><br><span class="line">			<span class="keyword">if</span> (a-&gt;is_die())</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (b-&gt;is_die())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (b-&gt;get_weapons().size() != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> dmg = b-&gt;gaming(t2%b-&gt;get_weapons().size(), t2);</span><br><span class="line">			a-&gt;change_life(dmg);</span><br><span class="line">			<span class="keyword">if</span> (b-&gt;is_die())</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++t1;</span><br><span class="line">		++t2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//让a是红，这里交换指针指向的值并不会影响实际的值</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_color() == <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> temp = a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!a-&gt;is_die() &amp;&amp; !b-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 both red %s %d and blue %s %d were alive in city %d\n&quot;</span>,</span><br><span class="line">			a-&gt;get_name().c_str(), a-&gt;get_seria(), b-&gt;get_name().c_str(), b-&gt;get_seria(),</span><br><span class="line">			choose);</span><br><span class="line">		a-&gt;after_game(NowTime, choose);</span><br><span class="line">		b-&gt;after_game(NowTime, choose);</span><br><span class="line">		flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;is_die() &amp;&amp; b-&gt;is_die())</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 both red %s %d and blue %s %d died in city %d\n&quot;</span>,</span><br><span class="line">			a-&gt;get_name().c_str(), a-&gt;get_seria(), b-&gt;get_name().c_str(), b-&gt;get_seria(),</span><br><span class="line">			choose);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 blue %s %d killed red %s %d in city %d remaining %d elements\n&quot;</span>,</span><br><span class="line">			b-&gt;get_name().c_str(), b-&gt;get_seria(), a-&gt;get_name().c_str(), a-&gt;get_seria(), choose,</span><br><span class="line">			b-&gt;get_life());</span><br><span class="line">		b-&gt;rob_weapon(a);</span><br><span class="line">		b-&gt;after_game(NowTime, choose);</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 red %s %d killed blue %s %d in city %d remaining %d elements\n&quot;</span>,</span><br><span class="line">			a-&gt;get_name().c_str(), a-&gt;get_seria(), b-&gt;get_name().c_str(), b-&gt;get_seria(), choose,</span><br><span class="line">			a-&gt;get_life());</span><br><span class="line">		flag = <span class="number">-1</span>;</span><br><span class="line">		a-&gt;rob_weapon(b);</span><br><span class="line">		a-&gt;after_game(NowTime, choose);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::headquarte_report</span><span class="params">(headquarter &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = a.get_totalife();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:50 %d elements in %s headquarter\n&quot;</span>, n, a.get_name());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::warriors_report</span><span class="params">(warrior *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a-&gt;report(NowTime, a-&gt;get_color().c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(weapon *a, weapon *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_seria() == b-&gt;get_seria())</span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_use_times() &lt; b-&gt;get_use_times();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_seria() &lt; b-&gt;get_seria();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(weapon *a, weapon *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_seria() == b-&gt;get_seria())</span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_use_times() &gt; b-&gt;get_use_times();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_seria() &lt; b-&gt;get_seria();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::Delete_weapon</span><span class="params">(weapon* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : weapons)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == w)</span><br><span class="line">		&#123;</span><br><span class="line">			weapons.erase(weapons.begin() + t);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::sort_weapons</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sort(weapons.begin(), weapons.end(), cmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::report</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">const</span> <span class="keyword">char</span> *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; t;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:55 %s %s %d has %d sword %d bomb %d arrow and %d elements\n&quot;</span>,</span><br><span class="line">		N, name.c_str(), seria, WeaponsNum[<span class="number">0</span>], WeaponsNum[<span class="number">1</span>], WeaponsNum[<span class="number">2</span>], life);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//time小时，str是红蓝的名字，city是city的编号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragon::yell</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; time;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:40 %s dragon %d yelled in city %d\n&quot;</span>, colorname.c_str(), seria, city);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">warrior::gaming</span><span class="params">(<span class="keyword">int</span> times, <span class="keyword">int</span> &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> x = weapons[times];</span><br><span class="line">	<span class="keyword">auto</span> p = x-&gt;using_weapon(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (is_use_bomb())</span><br><span class="line">		life -= p.second;</span><br><span class="line">	<span class="keyword">if</span> (x-&gt;is_bad())</span><br><span class="line">	&#123;</span><br><span class="line">		--WeaponsNum[x-&gt;get_seria()];</span><br><span class="line">		--t;</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x0 : weapons)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x0 == x)</span><br><span class="line">			&#123;</span><br><span class="line">				weapons.erase(weapons.begin() + k);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">delete</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p.first;</span><br><span class="line">&#125;</span><br><span class="line">dragon::dragon(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p) :</span><br><span class="line">	warrior(l, s, d, L, r, p)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;dragon&quot;</span>;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">1</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line">ninja::ninja(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p) :</span><br><span class="line">	warrior(l, s, d, L, r, p)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;ninja&quot;</span>;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">2</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line">iceman::iceman(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p) :</span><br><span class="line">	warrior(l, s, d, L, r, p)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;iceman&quot;</span>;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">1</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line">lion::lion(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> k) :</span><br><span class="line">	warrior(l, s, d, L, r, p), K(k)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">	loyalty = r;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">1</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::rob_weapon</span><span class="params">(warrior* enermy)</span>			<span class="comment">//抢劫武器</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> min = INT_MAX;</span><br><span class="line">	<span class="keyword">if</span> (weapons.size() &gt;= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : enermy-&gt;get_weapons())</span><br><span class="line">			<span class="keyword">delete</span> x;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(enermy-&gt;get_weapons().begin(), enermy-&gt;get_weapons().end(), cmp1);</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (weapons.size() != <span class="number">10</span> &amp;&amp; t &lt; enermy-&gt;get_weapons().size())</span><br><span class="line">	&#123;</span><br><span class="line">		weapons.push_back(enermy-&gt;get_weapons()[t]);</span><br><span class="line">		enermy-&gt;get_weapons()[t]-&gt;change_damege(get_attack());</span><br><span class="line">		++WeaponsNum[enermy-&gt;get_weapons()[t]-&gt;get_seria()];</span><br><span class="line">		++t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = t; k &lt; enermy-&gt;get_weapons().size(); k++)</span><br><span class="line">		<span class="keyword">delete</span> enermy-&gt;get_weapons()[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//wolf的抢劫不删除剩余的武器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wolf::wolf_rob</span><span class="params">(warrior* enermy, <span class="keyword">int</span> NowTime, <span class="keyword">int</span> City)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (weapons.size() &gt;= <span class="number">10</span> || enermy-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> min = INT_MAX;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt; temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : enermy-&gt;get_weapons())</span><br><span class="line">	&#123;</span><br><span class="line">		min = min &lt; x-&gt;get_seria() ? min : x-&gt;get_seria();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : enermy-&gt;get_weapons())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;get_seria() == min)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.push_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//把武器排好序</span></span><br><span class="line">	<span class="built_in">std</span>::sort(temp.begin(), temp.end(), cmp1);</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//把要缴获的武器放进，容器里</span></span><br><span class="line">	<span class="keyword">while</span> (weapons.size() != <span class="number">10</span> &amp;&amp; t &lt; temp.size())</span><br><span class="line">	&#123;</span><br><span class="line">		weapons.push_back(temp[t]);</span><br><span class="line">		temp[t]-&gt;change_damege(get_attack());</span><br><span class="line">		++WeaponsNum[temp[t]-&gt;get_seria()];</span><br><span class="line">		<span class="comment">//把敌人的武器erase但不用delete;这里的erase只要一直begin就好！！</span></span><br><span class="line">		enermy-&gt;change_weaponnum(min);</span><br><span class="line">		enermy-&gt;Delete_weapon(temp[t]);</span><br><span class="line">		++t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s1;</span><br><span class="line">	<span class="keyword">if</span> (min == <span class="number">0</span>)</span><br><span class="line">		s1 = <span class="string">&quot;sword&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (min == <span class="number">1</span>)</span><br><span class="line">		s1 = <span class="string">&quot;bomb&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		s1 = <span class="string">&quot;arrow&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:35 %s %s %d took %d %s from %s %s %d in city %d\n&quot;</span>, colorname.c_str(),</span><br><span class="line">		get_name().c_str(), get_seria(), t, s1.c_str(), enermy-&gt;get_color().c_str(),</span><br><span class="line">		enermy-&gt;get_name().c_str(), enermy-&gt;get_seria(), City);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_CITY = <span class="number">22</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(warrior *x, headquarter &amp;a, headquarter &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x-&gt;get_color() == a.get_name())</span><br><span class="line">		a.delete_warrior(x);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		b.delete_warrior(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> red[] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;		<span class="comment">//红色司令部制造武士的顺序</span></span><br><span class="line">	<span class="keyword">int</span> blue[] = &#123; <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;		<span class="comment">//蓝色司令部制造武士的顺序</span></span><br><span class="line">	<span class="keyword">int</span> lifearr[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> attackarr[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> TestNum, M, N, K, T, count = <span class="number">1</span>;				<span class="comment">//M生命元，N城市数量，K lion的忠诚消耗，T总时间</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; TestNum;</span><br><span class="line">	<span class="keyword">while</span> (TestNum--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N &gt;&gt; K &gt;&gt; T;</span><br><span class="line">		city *CityArr[MAX_CITY];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">			CityArr[t] = <span class="keyword">new</span> city(t);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>, count);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; NUM; b++)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; lifearr[b];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; NUM; b++)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; attackarr[b];</span><br><span class="line">		<span class="function">headquarter <span class="title">a</span><span class="params">(M, red, <span class="number">0</span>, N, lifearr, attackarr, K)</span></span>;</span><br><span class="line">		<span class="function">headquarter <span class="title">b</span><span class="params">(M, blue, <span class="number">1</span>, N, lifearr, attackarr, K)</span></span>;</span><br><span class="line">		CityArr[<span class="number">0</span>] = &amp;a;</span><br><span class="line">		CityArr[N + <span class="number">1</span>] = &amp;b;</span><br><span class="line">		<span class="function">Time <span class="title">temp</span><span class="params">(T)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (a.is_continue() &amp;&amp; b.is_continue())</span><br><span class="line">		&#123;</span><br><span class="line">			temp.create_event(a, b);</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			temp.escape_event(a, b);</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">5</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">				CityArr[t]-&gt;show_qwarriors().clear();</span><br><span class="line">			temp.forward_event(a, b, CityArr);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= N + <span class="number">1</span>; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (CityArr[t]-&gt;show_qwarriors().size() &gt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">auto</span> x : CityArr[t]-&gt;show_qwarriors())</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; temp.get_nowtime();</span><br><span class="line">						<span class="keyword">if</span> (x-&gt;get_loc() != b.get_location() &amp;&amp; x-&gt;get_loc() != a.get_location())</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s %s %d marched to city %d with %d elements and force %d\n&quot;</span>,</span><br><span class="line">								x-&gt;get_color().c_str(), x-&gt;get_name().c_str(), x-&gt;get_seria(), x-&gt;get_loc(),</span><br><span class="line">								x-&gt;get_life(), x-&gt;get_attack());</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;get_loc() == a.get_location())</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,</span><br><span class="line">								b.get_name(), x-&gt;get_name().c_str(), x-&gt;get_seria(), a.get_name(),</span><br><span class="line">								x-&gt;get_life(), x-&gt;get_attack());</span><br><span class="line">							<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; temp.get_nowtime();</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s headquarter was taken\n&quot;</span>, a.get_name());</span><br><span class="line">							a.Been_Token();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,</span><br><span class="line">								a.get_name(), x-&gt;get_name().c_str(), x-&gt;get_seria(), b.get_name(),</span><br><span class="line">								x-&gt;get_life(), x-&gt;get_attack());</span><br><span class="line">							<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; temp.get_nowtime();</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s headquarter was taken\n&quot;</span>, b.get_name());</span><br><span class="line">							b.Been_Token();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!a.is_continue() || !b.is_continue())</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">10</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (CityArr[t]-&gt;show_qwarriors().size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">auto</span> x = CityArr[t]-&gt;show_qwarriors();</span><br><span class="line">					<span class="keyword">auto</span> x1 = x[<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">auto</span> x2 = x[<span class="number">1</span>];</span><br><span class="line">					temp.rob_event(x1, x2, t);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">35</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">auto</span> redheadquarterwarriors = a.get_warrios();</span><br><span class="line">			<span class="keyword">auto</span> blueheadquarterwarriors = b.get_warrios();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//奇数红色先攻击，偶数蓝色先攻击</span></span><br><span class="line">				<span class="keyword">if</span> (CityArr[t]-&gt;show_qwarriors().size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">auto</span> x = CityArr[t]-&gt;show_qwarriors();</span><br><span class="line">					<span class="keyword">auto</span> x1 = x[<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">auto</span> x2 = x[<span class="number">1</span>];</span><br><span class="line">					<span class="comment">//让x1为红，x2为蓝</span></span><br><span class="line">					<span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">std</span>::swap(x1, x2);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;red&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">std</span>::swap(x1, x2);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">int</span> result = temp.fight_event(x1, x2, t);</span><br><span class="line">					<span class="keyword">if</span> (result == <span class="number">1</span>)	<span class="comment">//blue赢</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;red&quot;</span>)	<span class="comment">//没交换</span></span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x1, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x1);</span><br><span class="line">							<span class="keyword">delete</span> x1;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x2, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x2);</span><br><span class="line">							<span class="keyword">delete</span> x2;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x1, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x1);</span><br><span class="line">							<span class="keyword">delete</span> x1;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x2, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x2);</span><br><span class="line">							<span class="keyword">delete</span> x2;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">2</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;red&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							a.delete_warrior(x1);</span><br><span class="line">							b.delete_warrior(x2);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							a.delete_warrior(x2);</span><br><span class="line">							b.delete_warrior(x1);</span><br><span class="line">						&#125;</span><br><span class="line">						CityArr[t]-&gt;city_delete(x1);</span><br><span class="line">						CityArr[t]-&gt;city_delete(x2);</span><br><span class="line">						<span class="keyword">delete</span> x[<span class="number">1</span>];</span><br><span class="line">						<span class="keyword">delete</span> x[<span class="number">0</span>];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">40</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			temp.headquarte_report(a);</span><br><span class="line">			temp.headquarte_report(b);</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">50</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//temp.warrior_report(a, b);</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= N + <span class="number">1</span>; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">auto</span> x = CityArr[t]-&gt;show_qwarriors();</span><br><span class="line">				<span class="keyword">if</span> (x.size() == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					temp.warriors_report(x[<span class="number">0</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (x.size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (x[<span class="number">0</span>]-&gt;get_color() == <span class="string">&quot;red&quot;</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						temp.warriors_report(x[<span class="number">0</span>]);</span><br><span class="line">						temp.warriors_report(x[<span class="number">1</span>]);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						temp.warriors_report(x[<span class="number">1</span>]);</span><br><span class="line">						temp.warriors_report(x[<span class="number">0</span>]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">55</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			temp.add_nowtime();</span><br><span class="line">		&#125;</span><br><span class="line">		++count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
</search>
