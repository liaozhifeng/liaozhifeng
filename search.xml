<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020总结</title>
    <url>/2021/01/24/2020%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>这段时间一直在复习考试复习考试，就没什么时间好好想一下这一年发生了什么事 。虽然一切都是按部就班，但还是有一些小事情要记录下的</p>
]]></content>
      <tags>
        <tag>杂想</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的一些事情与想法</title>
    <url>/2020/10/17/some-puzzles-in-these-day/</url>
    <content><![CDATA[<p>本来应该是决定国庆放假时要写写的，重新打开的时候已经是10月17号了，时间真的过的是超级快的，这学期好像就要过去了🤒。</p>
<p>主要是这学期的课真的蛮多的，作业有些也很难，所以这学期都没怎么更过博客（也没有学到什么东西好更新的吧），其实课倒也不是说很难吧，就是时间太少了，被一个qt作业拖了好多时间，好在这周应该能大致完成，虽然有许多功能还没有实现吧，但是感觉再写下去能写一个月，就先上传到github上，以后或许大三有空能去完善下。之前是很喜欢图像界面，写了这个作业后发现图像界面好难呀，还要去考虑一些样式，以前写控制台直接写功能就好了。</p>
<p>然后这个作业写完后，我下星期就先不学其他东西，花一个星期认真写写作业，补一下课程的进度，特别是大物，好久都没学了。</p>
<p>接下来的一些学习计划，再认真的学一下html，css，js三剑客，然后进一步学习vue.js，学三剑客时可以做一些小界面、小项目。学vue是为了不想之前一样，没有学习路线，学了东西后，没有用就忘记了。这学期貌似还是看不完《算法导论》，看不完过年不回家了（看来真的看不完了）。就以后中午不回宿舍了，呆在教室能看一点是一点，然后每周日的下午也都用来学这个，希望我能在这本书中有所收获吧。</p>
<p>最近真的是发生了很多事情，虽然很多事情我了解的也不够，但还是挺让我不开心的，以后还是要学着辩证的看这个社会，不要被人乱用自己的怜悯之心。</p>
]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>一些想法</title>
    <url>/2020/08/16/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<p>其实一直都想写些什么，表达一下我的一些想法，但又总是被各种各样的事情耽搁了，想法也就断了，不知道从何开始表诉。昨天晚上看cba总决赛，看到阿联受伤了，今天大概是确认跟腱撕裂了，我想我还是有必要来写点东西吧。</p>
<a id="more"></a>
<p>跟腱撕裂对一个篮球运动员来说无疑是噩梦，这意味着即使能够完全恢复，你的爆发力，弹跳能力也会大不如前。看到阿联倒下去，摸着跟腱，其实或多或少已经猜到了结局，阿联也该卸下他的担子，让下一代人前行了。记得里约奥运会，男篮小组赛被淘汰出局时，记得记者与阿联聊的是19年的世界杯，东京的奥运会，记者想表达的是中国男篮有光明的未来，可阿联说的是都以为未来很长，其实一晃就过去了。确实，世界杯的离奇出局，奥运会也无法入选，中国男篮与其他国家的差距好像也越来越远了。总是想着有以后不去努力，其实时间真的走的飞快，就好像总想着有明天，然后明天继续拖，一晃可能重要的事情就过去了。</p>
<p>感觉男生可能很多都很喜欢看比赛，那种比赛带来的激情总能让我也心潮澎湃。我从08年就有开始看中国男篮了，那时候阿联还是一年轻小伙，没想到都过去了12年了，我也算开开心心地走过了这10多年，快来到多年前幻想的年纪了。以前遇到不开心的事时，都会在想以后工作了，有新的生活了，然后就很激动。到了现在，对工作的期待也不像之前那么猛烈，大概我最根本的想法是逃离现状，期待以后有更好的生活吧。</p>
<p>从小我就因为牙齿，被别人嘲笑挺多的，所以现在我好像对很多事情渐渐没了想法。其实我是一个很有表现欲的人，但很多时候想到自己的牙齿就会压制住内心的想法，本来可以更好却无法更好，有时候也是会很不开心的。然后呢，我从小好像也没有什么叛逆的想法，好像一直是一个认真学习的好学生，没有做过什么特殊的事情，按部就班的小学，初中，高中，大学，只是想要考的学校一个接一个的都考不上。小时候总以为我有超能力，可以控制下雨，控制车辆的行走，只不过后来的求学生涯，让我渐渐的认识到我只是一个很很很普通的人罢了。以为我在写作文很强，结果每一次都是40多一点，没有什么思想深度，自然写不出好文章的；高中时拼命的做题，成绩也一直很一般，可能是方法不对吧，也可能自己的能力就那样，幸好努力好像也算一种天赋，我才能勉强勉强不那么普通。</p>
<p>高二时，能因为一个自我安慰的理由拼命的学习，现在想想虽然有些好笑，但是我也找不回当时的激情了，有什么值得拼命的东西真好，希望大家都能拥有想守护一生的人。高三就过的平平常常，想说的话可能没机会说出口了，有些人真的是不知不觉已经见过了最后一面了。其实好像也没什么特别的事好说吧，所以写的挺乱的，如果有人看到，希望我的情绪不要影响你们。定几个以后的目标吧：</p>
<ul>
<li>对身边的人好一点，别老发脾气</li>
<li>改掉拖延症，勇敢一点</li>
<li>不卑不亢，自己其实已经很好了</li>
<li>每天开心，努力</li>
</ul>
]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>大一总结以及未来的规划</title>
    <url>/2020/07/20/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>时间过的真是很快，特别是在家混了一个学期，大一就这样过去了，也是很久没有写博客了，趁着最近心情不是很好 <del>打游戏总是输</del> ，就写一下大一学了什么吧。</p>
<a id="more"></a>
<h3 id="入学">入学</h3>
<p>暑期时，我有看了<strong>一点</strong>翁恺老师的c语言教程，入学时还算有点基础吧（只是看到for循环好像）。军训结束后<del>想起来军训过的还是很开心的，虽然太阳很大</del>，我们学院的王立斌老师来介绍他组织的图灵班。第一节课去的时候，讲的是输出格式化，这个还算听的懂吧。结果第二节课就直接讲起了指针和二级指针，听得我一头雾水，交作业也要求要用函数<del>那时候我连什么是函数都不知道</del>，后面还是退出了，只要是因为我学得太慢了吧。</p>
<h3 id="大一上的一些课程">大一上的一些课程</h3>
<p>大一上学期最难的应该是线代吧，我直到期末才有点懂得线代的用处，结果现在又忘了，以后再找机会二刷吧。编程方面主要就学了c语言吧，看的是谭浩强的书<del>这书真的不行</del>，而且我要吐槽一下，我们学院教的也太慢了吧，练指针都还没教，没有那种逼着我们跑的感觉，所以我学的也很慢，不过我倒是自己看了一部分的数据结构，那时候对指针理解不够，所以看到二叉树的遍历就看不下了，现在好多也忘了，学了就忘是真的烦😥。上学期算学的很少吧，参加了很多比赛也都没有拿奖，真的挺伤心的，感觉我主要的原因是很难静下心来，学着学着就想跑出去玩，所以上学期坐了几百块的地铁，而且什么都想学，又只学了一点点，就搁置了，因为又有其他的事情需要去做。比如上学期参加了ctf新生赛，算是一个人参加的吧，忙活了几天后，没有拿奖，真的那时候我什么都不懂，然后比赛结束后，我也没有继续学习了，就把本来通过这次比赛学的<strong>一点点</strong>知识也扔掉了，害！我感觉这是一个很致命的问题，学习一个知识后，应该继续深入学习，然后再与现阶段学习的内容贯通，最后能够做点东西出来，才算有用吧。</p>
<h3 id="寒假">寒假</h3>
<p>寒假时，刷了很多acm的题，接触了挺多算法的，已经能熟悉的用深搜了，也开始学习动态规划了，但是后面一开学，我又开始搁置了<del>接受不了.jpg</del> 。现在算是又忘的差不多了吧，老毛病了，感觉要每天都做一些才能不忘记，不然真的挺容易不想继续，就慢慢搁了，因为每天都会有各种各样的事，而且我也挺懒的哈。寒假还学了一下小程序，也是学得差不多就搁置了，不过我找到了一个<a href="https://www.bilibili.com/video/BV1sx411z77P?from=search&amp;seid=6116369401220262130">非常好的教程</a>，算把小程序的怎么开发讲得非常好了，结合微信开发文档，如果以后要开发我还是很有信心做好的。</p>
<h3 id="大一下">大一下</h3>
<p>这学期算学了很多内容吧，高数下比上难了好多，学了C++面向对象，也做了一个很多行的大作业，C++算学的还可以，只是对C++11还不是很掌握，本来打算暑假继续学习C++的，现在也不知道要往什么方向学习，害。这学期算学得不多吧，还在一个打基础的阶段，等离散跟概率论都学完，我就会加快步伐的。</p>
<h3 id="接下来的安排">接下来的安排</h3>
<ul>
<li>准备数学建模</li>
<li>继续学习《算法导论》</li>
<li>c#图像识别入门（申请的项目要求的）</li>
<li>下学期可能会申请当兼助，做点有意义的事</li>
</ul>
<p>下次再来写写最近的感悟，不涉及技术方面的。</p>
]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>离散数学复习</title>
    <url>/2021/01/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="图论">图论</h3>
<ul>
<li><p>零图：<span class="math inline">\(E = ∅\)</span>，即只有顶点，没有边的图。</p></li>
<li><p>平凡图：只有一个顶点（也称<span class="math inline">\(1\)</span>阶图）的零图。</p></li>
<li><p>悬挂顶点：度数为<span class="math inline">\(1\)</span>的顶点；悬挂边：与悬挂顶点关联的边。</p></li>
<li><p>在无向图中，图的最大度：<span class="math inline">\(∆(G)={d(v)|v\in V}\)</span>，其中<span class="math inline">\(V\)</span>表示顶点集，<span class="math inline">\(d(v)\)</span>表示顶点的度数，记住用<span class="math inline">\(\Delta(G)\)</span>去表示最大度；同理图的最小度的定义易得，注意的是我们用<span class="math inline">\(\delta(G)\)</span>表示图的最小度。另外无向图用<span class="math inline">\((v_n,v_m)\)</span>表示边。</p></li>
<li><p>在有向图中，<span class="math inline">\(v\)</span>的入度<span class="math inline">\(d^+(v)\)</span>，<span class="math inline">\(v\)</span>的出度<span class="math inline">\(d^-(v)\)</span>，<span class="math inline">\(v\)</span>的度数<span class="math inline">\(d(v) = d^+(v)+d^-(v)\)</span>，同时有向图还定义了出度、入度的最大度和最小度。有向图用<span class="math inline">\(\langle v_n,v_m \rangle\)</span>表示边。</p></li>
<li><p>握手定理：图的所有顶点的度数之和等于边数的<span class="math inline">\(2\)</span>倍，因为每条边都提供<span class="math inline">\(2\)</span>度，所以度数之和一定是偶数。</p></li>
<li><p>度数列：<span class="math inline">\(V=\{v_1,v_2,...v_n\}\)</span>，<span class="math inline">\(G\)</span>的度数列：<span class="math inline">\(d(v_1),d(v_2),...,d(v_n)\)</span>。</p></li>
<li><p>简单图：既无平行边也无环的图称为简单图。其中平行边的条数称为重数。</p></li>
<li><p>完全图和正则图：无向完全图，记作<span class="math inline">\(K_n\)</span>，边数为<span class="math inline">\(n(n-1)/2\)</span>，有向完全图，边数为<span class="math inline">\(n(n-1)\)</span>；<span class="math inline">\(k-\)</span>正则图：每个顶点的度数均为<span class="math inline">\(k\)</span>的无向简单图。</p></li>
<li><p>子图：生成子图：<span class="math inline">\(V&#39; = V\)</span>且<span class="math inline">\(G&#39;\subseteq G\)</span>；<span class="math inline">\(V&#39;\)</span>的导出子图，以两端点都在<span class="math inline">\(V&#39;\)</span>中所有的边集的子图，记作<span class="math inline">\(G[V&#39;]\)</span>；<span class="math inline">\(E&#39;\)</span>的导出子图：以<span class="math inline">\(E&#39;\)</span>所以关联的顶点为顶点集的子图，记作<span class="math inline">\(G[E&#39;]\)</span>。</p></li>
<li><p>通路：<span class="math inline">\(Γ = v_0e_1v_1e_2...e_lv_l\)</span> ，称<span class="math inline">\(Γ\)</span>为<span class="math inline">\(v_0\)</span>到<span class="math inline">\(v_l\)</span>的通路，<span class="math inline">\(l\)</span>为通路的长度，若<span class="math inline">\(v_0=v_l\)</span>则称$Γ <span class="math inline">\(为回路。若通路（回路）中所有顶点（对于回路，\)</span>v_0=v_l$）各异，称此通路<strong>初级通路（回路）</strong>；若通路中所有的边各异，则称为简单通路。初级通路是简单通路，反之不然。</p></li>
<li><p><span class="math inline">\(Γ\)</span>的表示方法 ：用顶点和边交替序列、用边序列、简单图中用顶点序列。</p></li>
<li><p>连通分支：设<span class="math inline">\(R\)</span>是<span class="math inline">\(G\)</span>中顶点之间的连通关系，按<span class="math inline">\(R\)</span>可将<span class="math inline">\(V(G)\)</span>划分为<span class="math inline">\(k\)</span>个等价类，记作<span class="math inline">\(V_1,V_2,...,V_k\)</span>，由他们的导出子图<span class="math inline">\(G[V_1],G[V_2],...,G[V_k]\)</span>称为<span class="math inline">\(G\)</span>的连通分支。令<span class="math inline">\(p(G)=k\)</span>表示<span class="math inline">\(G\)</span>的连通分支数为<span class="math inline">\(k\)</span>。</p></li>
<li><p>点割集与边割集：若<span class="math inline">\(V&#39; \subset V\)</span>，<span class="math inline">\(p(V-V&#39;)&gt;p(V)\)</span>，且<span class="math inline">\(\forall V&#39;&#39; \subset V\)</span>，<span class="math inline">\(p(V-V&#39;&#39;) = V\)</span>，则称<span class="math inline">\(V&#39;\)</span>为<span class="math inline">\(G\)</span>的点割集，若点割集只有一个点，则称此顶点为割点；同理可以得到边割集的定义，若边割集只有一条边则称此边为割边或桥。</p></li>
<li><p>点连通度和边连通度：记<span class="math inline">\(min\{|V&#39;| \space | V&#39;\)</span>是<span class="math inline">\(G\)</span>的点割集<span class="math inline">\(\}=\kappa(G)\)</span>，称为<span class="math inline">\(G\)</span>的点连通度；记<span class="math inline">\(min\{|E&#39;| \space|E&#39;\)</span>是<span class="math inline">\(G\)</span>的边割集<span class="math inline">\(\} = \lambda(G)\)</span>，称为<span class="math inline">\(G\)</span>的边连通度。对于任意的无向图有<span class="math inline">\(\kappa(G)\leq \lambda(G)\leq \delta(G)\)</span> 。</p></li>
<li><p>二部图判别定理：无向图<span class="math inline">\(G=\langle V,E\rangle\)</span>是二部图当且仅当<span class="math inline">\(G\)</span>中无奇数长度的回路，记作<span class="math inline">\(\langle V_1,V_2,E\rangle\)</span>。二部图还有一个非常重要的匹配问题，匹配就是<span class="math inline">\(E&#39; \subseteq E\)</span>，且<span class="math inline">\(E&#39;\)</span>中的边互补相邻，注意极大匹配，最大匹配，完备匹配，完美匹配等问题。</p>
<a id="more"></a></li>
<li><p>完备匹配判定定理$(|V_1||V_2|) <span class="math inline">\(：(Hall定理)，存在\)</span>V_1,V_2<span class="math inline">\(的完备匹配当且仅当\)</span>V_1<span class="math inline">\(中任意\)</span>k(1k|V_1|)<span class="math inline">\(个顶点至少与\)</span>V_2<span class="math inline">\(中\)</span>k<span class="math inline">\(个顶点相邻；（t条件）：如果存在正整数\)</span>t<span class="math inline">\(，使得\)</span>V_1<span class="math inline">\(中每个顶点至少关联\)</span>t<span class="math inline">\(条边，而\)</span>V_2<span class="math inline">\(中的顶点至多关联\)</span>t<span class="math inline">\(条边，则\)</span>G<span class="math inline">\(中存在\)</span>V_1<span class="math inline">\(到\)</span>V_2$的完备匹配。</p></li>
<li><p>无向图关联矩阵：<span class="math inline">\(m_{ij}\)</span>为<span class="math inline">\(v_i\)</span>与<span class="math inline">\(e_j\)</span>的关联次数；无环有向图关联矩阵：<span class="math inline">\(m_{ij}=-1,0,1\)</span>，<span class="math inline">\(1\)</span>代表是起点，<span class="math inline">\(-1\)</span>代表是终点；关联矩阵记为<span class="math inline">\(M\)</span>。 有向图的邻接矩阵：<span class="math inline">\(a_{i,j}\)</span>为以<span class="math inline">\(v_i\)</span>为起点，<span class="math inline">\(v_j\)</span>为终点的边的条数，记为<span class="math inline">\(A\)</span>。<span class="math inline">\(A^l\)</span>中元素表示长度为<span class="math inline">\(l\)</span>的边的条数。 可达矩阵：<span class="math inline">\(p_{ij} = 0,1\)</span>，<span class="math inline">\(1\)</span>表示可达。</p></li>
<li><p>欧拉通路：经过所有顶点且每条边恰好且经过一次的通路。无向图具有欧拉回路当且仅当<span class="math inline">\(G\)</span>是连通的且无奇度顶点，无向图具有欧拉通路当且仅当图是连通的且只有两个奇度顶点。有向图具有欧拉回路当且仅当<span class="math inline">\(G\)</span>是连通的且每个顶点的出度等于入度，具有欧拉通路当且图中有一个顶点<span class="math inline">\(d^--d^+ = 1\)</span>，有一个顶点<span class="math inline">\(d^+-d^-=1\)</span>，其他顶点的出度等于入度。</p></li>
<li><p>哈密顿通路：经过图中所有顶点一次且仅一次的通路。 必要条件：若无向图是哈密顿图，则对于<span class="math inline">\(V\)</span>的任意非空真子集<span class="math inline">\(V&#39;\)</span>，均有<span class="math inline">\(p(V-V&#39;)&lt;|V&#39;|\)</span>,推论，有割点的图不是哈密顿图。 充分条件：若<span class="math inline">\(G\)</span>是<span class="math inline">\(n\)</span>阶无向图，<span class="math inline">\(d(u)+d(v)\geq n-1\)</span>，<span class="math inline">\(u,v\)</span>为<span class="math inline">\(G\)</span>中任意不相邻点，则<span class="math inline">\(G\)</span>中存在哈密顿通路；若<span class="math inline">\(d(u)+d(v)\geq n\)</span>则<span class="math inline">\(G\)</span>中存在哈密顿回路。</p></li>
<li><p>基本回路系统：设<span class="math inline">\(T\)</span>是<span class="math inline">\(n\)</span>阶<span class="math inline">\(m\)</span>条边的无向连通图<span class="math inline">\(G\)</span>的一棵生成树，设<span class="math inline">\(e_1,e_2,...,e_{n-m+1}\)</span>为<span class="math inline">\(T\)</span>的弦，<span class="math inline">\(C_r(r=1,2,...,m-n+1)\)</span>为<span class="math inline">\(T\)</span>添加弦<span class="math inline">\(e_r\)</span>产生的<span class="math inline">\(G\)</span>中由弦<span class="math inline">\(e_r\)</span>和树枝构成的圈，称<span class="math inline">\(C_r\)</span>为<span class="math inline">\(G\)</span>的对应弦<span class="math inline">\(e_r\)</span>基本回路或基本图，称<span class="math inline">\(\{C_1.C_2,...,C_{m-n+1}\}\)</span>为<span class="math inline">\(G\)</span>对应<span class="math inline">\(T\)</span>的基本回路系统，称<span class="math inline">\(m-n+1\)</span>为<span class="math inline">\(G\)</span>的圈秩，记作<span class="math inline">\(ξ(G)\)</span>。</p></li>
<li><p>基本割集系统：设<span class="math inline">\(T\)</span>是<span class="math inline">\(n\)</span>阶的无向连通图<span class="math inline">\(G\)</span>的一棵生成树，设<span class="math inline">\(e_1,e_2,...,e_{n-1}\)</span>为<span class="math inline">\(T\)</span>的树枝，<span class="math inline">\(S_i(i=1,2,..,n-1)\)</span>为由树枝<span class="math inline">\(e_i\)</span>和弦构成的割集。称<span class="math inline">\(\{S_1,S_2,...,S_{n-1}\}\)</span>为<span class="math inline">\(G\)</span>对应<span class="math inline">\(T\)</span>的基本割集系统，称<span class="math inline">\(n-1\)</span>为<span class="math inline">\(G\)</span>的割集秩，记作<span class="math inline">\(η(G)\)</span>。</p></li>
<li><p>平面图与平面嵌入：如果能将图<span class="math inline">\(G\)</span>中除顶点外边不相交地画在平面上，则称<span class="math inline">\(G\)</span>是平面图，由这个图画出的无边相交的图称为<span class="math inline">\(G\)</span>的平面嵌入，没有平面嵌入的图称为非平面图。</p></li>
<li><p>平面图的一些概念：无限面，用<span class="math inline">\(R_0\)</span>表示，有限面，用<span class="math inline">\(R_1, R_2, ..., R_k\)</span>表示，面<span class="math inline">\(R_i\)</span>的次数，<span class="math inline">\(R\)</span>边界的长度，用<span class="math inline">\(deg(R_i)\)</span>表示。 平面图各面的次数之和等于边数的<span class="math inline">\(2\)</span>倍，一条边或者是<span class="math inline">\(2\)</span>个面的公共边界，或者在一个面中出现两次，特别要注意的是这种出现两次的情况，这种边应该只会在无限面中出现，所以在写无限面的边界时也应该注意，这条边要写两次。</p></li>
<li><p>极大平面图：在简单平面中任意不相邻的顶点之间加一条新边所得的图为非平面图。极大平面是连通的，且设<span class="math inline">\(G\)</span>为<span class="math inline">\(n(\geq3)\)</span>阶简单平面图，<span class="math inline">\(G\)</span>为极大平面图的充分必要条件是，<span class="math inline">\(G\)</span>的每个面次数均为<span class="math inline">\(3\)</span>。</p></li>
<li><p>欧拉公式：设<span class="math inline">\(G\)</span>为<span class="math inline">\(n\)</span>阶<span class="math inline">\(m\)</span>条边<span class="math inline">\(r\)</span>个面的连通平面图，则<span class="math inline">\(n-m+r=2\)</span>。 欧拉公式的推论：设平面<span class="math inline">\(G\)</span>中有<span class="math inline">\(p(p\geq 2)\)</span>连通分支，则<span class="math inline">\(n-m+r=p+1\)</span></p></li>
<li><p>同胚与收缩：<span class="math inline">\(G_1\)</span>与<span class="math inline">\(G_2\)</span>同构，或经过反复插入或消去<span class="math inline">\(2\)</span>度顶点后，称为同胚。收缩边称为收缩。 库拉图斯基定理：一个图是平面图当且仅当它既不包含与<span class="math inline">\(K_5\)</span>同胚的<strong>子图</strong>，也不含与<span class="math inline">\(K_{3,3}\)</span>同胚的子图，一个图是平面图当且仅当它既无可收缩为<span class="math inline">\(K_5\)</span>的子图，也无可收缩为<span class="math inline">\(K_{3,3}\)</span>的子图。</p></li>
<li><p>对偶图的性质：设<span class="math inline">\(G^*\)</span>是连通图<span class="math inline">\(G\)</span>的对偶图，<span class="math inline">\(n^*,m^*,r^*\)</span>和<span class="math inline">\(n,m,r\)</span>分别为<span class="math inline">\(G^*,G\)</span>的顶点数，边数，面数，有<span class="math inline">\(n^*=r,m*=m,r^*=n\)</span>，设<span class="math inline">\(G^*\)</span>的顶点<span class="math inline">\(v^*_i\)</span>位于<span class="math inline">\(G\)</span>的面<span class="math inline">\(R_i\)</span>中，则<span class="math inline">\(d(v^*_i)=deg(R_i)\)</span>。</p></li>
</ul>
<h3 id="代数结构">代数结构</h3>
<ul>
<li>积代数：设<span class="math inline">\(V_1 = \langle S_1, \circ \rangle, V_2 =\langle S_2, *\rangle\)</span>，<span class="math inline">\(V_1\)</span>与<span class="math inline">\(V_2\)</span>的积代数<span class="math inline">\(V=\langle S_1\times S_2,\cdot\rangle\)</span>，<span class="math inline">\(\langle x_1, y_1 \rangle,\langle x_2,y_2\rangle \in S_1\times S_2\)</span>。<span class="math inline">\(\langle x_1, y_1 \rangle\cdot \langle x_2,y_2\rangle\)</span> <span class="math inline">\(=&lt;x_1\circ x_2, y_1*y_2&gt;\)</span>。</li>
<li>设<span class="math inline">\(G=&lt;a&gt;\)</span>是<span class="math inline">\(n\)</span>阶循环群，则对<span class="math inline">\(n\)</span>的每个正因子<span class="math inline">\(d\)</span>，<span class="math inline">\(G\)</span>恰好有一个<span class="math inline">\(d\)</span>阶的子群。</li>
<li>设<span class="math inline">\(G=&lt;a&gt;\)</span>是循环群，若<span class="math inline">\(G\)</span>是无限循环群，则<span class="math inline">\(G\)</span>只有两个生成元，即<span class="math inline">\(a\)</span>和<span class="math inline">\(a^{-1}\)</span>。若<span class="math inline">\(G\)</span>是<span class="math inline">\(n\)</span>阶循环群，则<span class="math inline">\(G\)</span>有<span class="math inline">\(\phi(n)\)</span>个生成元，对于任意小于<span class="math inline">\(n\)</span>且与<span class="math inline">\(n\)</span>互素的自然数<span class="math inline">\(r\)</span>，<span class="math inline">\(a^r\)</span>是<span class="math inline">\(G\)</span>的生成元。</li>
<li>子环判别定理：设<span class="math inline">\(R\)</span>是环，<span class="math inline">\(S\)</span>是<span class="math inline">\(R\)</span>得非空子集，若<span class="math inline">\(\forall a, b \in S\)</span>，<span class="math inline">\(a-b\in S\)</span>且<span class="math inline">\(\forall a,b \in S，ab\in S\)</span>，则<span class="math inline">\(S\)</span>是<span class="math inline">\(R\)</span>的子环。</li>
<li>如果<span class="math inline">\(R\)</span>既是交换环、含幺环、无零因子环，则称<span class="math inline">\(R\)</span>是整环。</li>
<li>域：若<span class="math inline">\(R\)</span>是整环，则对<span class="math inline">\(R\)</span>中的每个元素(<span class="math inline">\(\{0\}\)</span>除外)，都有逆元，则称<span class="math inline">\(R\)</span>是域。</li>
<li>格的定义：利用偏序集<span class="math inline">\(\langle S, \preccurlyeq \rangle\)</span>，如果<span class="math inline">\(\forall x, y \in S, \{x,y\}\)</span>都有最小上界和最大下界，则称<span class="math inline">\(S\)</span>关于偏序<span class="math inline">\(\preccurlyeq\)</span>做出一个格。<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>有<span class="math inline">\(\vee, \wedge\)</span>两个运算，其中<span class="math inline">\(\vee\)</span>表示最小上界，<span class="math inline">\(\wedge\)</span>表示最大下届。其中运算<span class="math inline">\(\vee, \wedge\)</span>还要满足交换律，结合律，幂等律，吸收律<span class="math inline">\(a(a\vee b) = a,a(a\wedge b)=a\)</span>。</li>
<li>格的等价定义：设<span class="math inline">\(\langle L,*,\cdot \rangle\)</span>是具有两个二元运算的代数系统，如果<span class="math inline">\(*,\cdot\)</span>满足交换律，结合律，幂等律，吸收率，则称<span class="math inline">\(\langle L,*,\cdot \rangle\)</span>是格。</li>
<li>判断一个偏序集是否构成格：可以判断每两个元素的最小上界跟最大下界是否唯一，如果不唯一则不构成格。</li>
<li>分配格：<span class="math inline">\(L\)</span>是分配格当且仅当<span class="math inline">\(L\)</span>不含与砖石格或者五角格同构的子格。或者当且仅当<span class="math inline">\(\forall a,b,c \in L\)</span>有<span class="math inline">\((a\vee b = a\vee c 且a\wedge b=a\wedge c)\)</span><span class="math inline">\(\rightarrow (b=c)\)</span>。特别的小于<span class="math inline">\(5\)</span>元的格，链都是分配格。</li>
<li>设<span class="math inline">\(\langle L, \wedge,\vee,0,1\rangle\)</span>是有界格，<span class="math inline">\(a\in L\)</span>, 若存在<span class="math inline">\(b\in L\)</span>使得<span class="math inline">\(a\vee b =1\)</span>和<span class="math inline">\(a\wedge b=0\)</span>成立则称<span class="math inline">\(b\)</span>是<span class="math inline">\(a\)</span>的补元。若<span class="math inline">\(L\)</span>是有界分配格，则若<span class="math inline">\(L\)</span>中的元素存在补元，则只存在唯一的补元。若<span class="math inline">\(L\)</span>中所有的元素都存在补元，则称<span class="math inline">\(L\)</span>为有补格。</li>
<li>如果一个格是有补分配格，则称它为布尔格或者布尔代数，记作<span class="math inline">\(\langle L, \wedge,\vee,0,1,&#39;\rangle\)</span>，任何有限布尔代数的元素的个数都是<span class="math inline">\(2^n\)</span>。有<span class="math inline">\((a&#39;)&#39;=a\)</span>，还有德摩根律。</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
  <entry>
    <title>魔兽世界3备战</title>
    <url>/2020/05/13/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>这个题目，我花了差不多4天才全部做出来的，一开始也没很好的设计，就是看见有什么功能，就写一个函数的声明，然后写另一个类的时候，发现我要用到前面写的类的函数时，才去定义相应的函数，所以可能会很混乱。我写这篇文章一是为了重新理一下思路，也希望能给后面设计的人一个想法吧。</p>
<a id="more"></a>
<p>首先我大体上设置了5个类吧，不包括相应的子类，分别是factorial（工厂类）、headquarter（司令部类，其实叫做城市类更好）、time（时间类，用来管理时间和大部分的输出的）、warrior（武士类，这道题中最重要的类）、weapon（武器类）。先从最重要的开始吧。</p>
<ul>
<li><p>warrior</p>
<p>武士有生命值(life)、编号（serial 注意这个编号是从1开始算的，每制造一个武士编号就相应的加一，而且并不会因为删除前面的武士而改变）、攻击力（damage，由司令部决定，但具体的规则不同，可以由不同的子类传进去）、位置（location，用来记录武士现在所在的位置，用于打架与移动）、武器的数量数组（WeaponNum，静态数组用来储存不同武器的数量），名字（用来存储子类不同的名字）colorname（隶属司令部的颜色）、武器（这里使用一个vector数组，放武士拥有的武器）。武士有两个重要的方法一个是抢武器，一个是用武器。</p></li>
<li><p>weapon</p>
<p>武器有攻击力，武器的编号，剩余的使用次数，还有使用string存储它的名字。武器最终要的是ninja武士使用bomb不会自残，我的做法是使用一个使用武器的方法，并把武士作为形参传进来。</p></li>
<li><p>factorial</p>
<p>这个类听从了hhy老师的建议，使用了了静态函数负责制造武士和制造武器，但是我现在的工厂类没有任何数据成员，所以我还是不知道为什么不使用普通的函数，或许可以给工厂多一些功能，比如一个静态成员去记录现在的武士武器编号？？</p></li>
<li><p>time</p>
<p>用于对于处理各种事件并输出，主要要总的输出时间和现在的时间，可以包括小时与分钟，也可以只包括小时。这个类的方法大致于题目不同时刻的事件相同，有制造武士，武士逃跑，武士前进，同一个城市的武士抢武器，打架，司令部报告，武士报告。对于武士我的处理方法是先按司令部全部遍历都前进一步，在根据城市的顺序从左到右输出，或许可以全部由城市来负责。</p></li>
<li><p>headquarters</p>
<p>司令部是继承普通的city类来着，司令部有总的生命值，制造武士的顺序，各个武士的攻击力和所需要的生命（或许这两个就可以放置在factorial类中作为静态成员），还需要一个vector用来记录司令部的士兵。</p></li>
</ul>
<p>类的介绍就差不多是这样了，删除武士删除武器的操作，或许都可以由factorial来实现，把功能给对应的类吧，不过这样好像要写成模板函数了。</p>
<hr />
<p>最后再说一下可能会遇到的一些坑吧。</p>
<p>武士打架时，在奇数城市红方先攻击，偶数城市蓝方先攻击</p>
<p>武器的攻击力会随使用者的改变而发生改变，<strong>所以在抢夺武器时记得要给一个接口去改变武器的攻击力</strong></p>
<p>Wolf的抢夺武器与打赢后抢夺武器是不一样的，wolf只抢劫一种（编号最小的武器），而打赢之后进行的抢劫，所有的武器都能抢。</p>
<p>关于删除武器，武士的erase，erase最好写一个函数，参数传递要删除的对应指针（容器里面放的是指针嘛），erase的参数都是迭代器，推荐使用for循环找到要删除指针对应的迭代器。</p>
<p>注意iceman前进一步损失10%的生命值，表示的方式是<span class="math display">\[life-life*10%\]</span>,而不是<span class="math display">\[life*90%\]</span></p>
<p>移动的输出顺序是按目的地从西向东的，我的做法是先全部移动，再按city输出相应的信息</p>
<p>如果武士用一个数组去存储武器的数量，另外还有如果wolf抢劫了敌人的武器记得把敌人数组的数量减掉，武士的数组加相应的值。</p>
<p>还有一个非常坑的点，在打架时，假如两个都剩余一件sword的攻击力为0，或者有一个没有武器，都会进行入死循环。但是其他两种武器是有使用次数的就每关系。</p>
<p>耳聋咆哮是活下来就要的，不是赢了才。</p>
<hr />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最后附上代码，可能有很多功能没有分离好，导致接口写的太多了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">factorial</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">headquarter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">city</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">warrior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weapon</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">factorial</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//l表示武士的生命，L表示武士的位置，s表示武士的标号，choice确定选择哪一个武士</span></span><br><span class="line">	<span class="comment">//需要的变量哪一个武士,武士的各种信息</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> warrior* <span class="title">creator_warrior</span><span class="params">(<span class="keyword">int</span> choice, <span class="keyword">int</span> s, <span class="keyword">int</span> life, <span class="keyword">int</span> L, <span class="keyword">int</span> total, <span class="keyword">int</span>, <span class="keyword">int</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">creator_weapon</span><span class="params">(<span class="keyword">int</span> attack, <span class="keyword">int</span> seria, <span class="keyword">int</span> num, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt;&amp;d, <span class="keyword">int</span> *)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">warrior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">city</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> location;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt; qwarriors;	<span class="comment">//用来占领存放武士的容器</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	city(<span class="keyword">int</span> l = <span class="number">0</span>) :location(l)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_qwarriors</span><span class="params">(warrior *)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt; &amp;<span class="title">show_qwarriors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> qwarriors;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">city_delete</span><span class="params">(warrior *)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">headquarter</span> :</span><span class="keyword">public</span> city</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> TotalLife;					<span class="comment">//司令部总的生命元</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">7</span>];					<span class="comment">//司令部的名字</span></span><br><span class="line">	<span class="keyword">int</span> makeseq[<span class="number">5</span>];					<span class="comment">//制造武士的顺序</span></span><br><span class="line">	<span class="keyword">int</span> LifeNeed[<span class="number">5</span>];				<span class="comment">//把制造武士所需的生命元也放在类里</span></span><br><span class="line">	<span class="keyword">int</span> WarriorAttack[<span class="number">5</span>];</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt; warriors;	<span class="comment">//用来存放武士的容器</span></span><br><span class="line">	<span class="keyword">bool</span> WheatherCreate = <span class="literal">true</span>;			<span class="comment">//是否可以制造武士</span></span><br><span class="line">	<span class="keyword">bool</span> IsContinue = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> WarriorSeria = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> lionloyalty;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//t是司令部的生命元，arr是制造武士的顺序，N城市的数量 A是武士攻击力数组</span></span><br><span class="line">	<span class="comment">//L是武士的生命值数组</span></span><br><span class="line">	headquarter(<span class="keyword">int</span> t, <span class="keyword">int</span> *arr, <span class="keyword">int</span> m, <span class="keyword">int</span> N, <span class="keyword">int</span> *L, <span class="keyword">int</span> *A, <span class="keyword">int</span> Ly) :TotalLife(t),</span><br><span class="line">		lionloyalty(Ly)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">5</span>; n++)</span><br><span class="line">		&#123;</span><br><span class="line">			makeseq[n] = arr[n];</span><br><span class="line">			LifeNeed[n] = L[n];</span><br><span class="line">			WarriorAttack[n] = A[n];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			name[<span class="number">0</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">			name[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">			name[<span class="number">2</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">			name[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			location = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (m == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			name[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">			name[<span class="number">1</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">			name[<span class="number">2</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">			name[<span class="number">3</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">			name[<span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			location = N + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">getnextMakeValidWarriorKind</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (TotalLife &gt;= LifeNeed[makeseq[warriors.size() % <span class="number">5</span>]])<span class="comment">//</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete_warrior</span><span class="params">(warrior *)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">produce</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_continue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> IsContinue;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;warrior*&gt;&amp;  <span class="title">get_warrios</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> warriors;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_totalife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> TotalLife;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_location</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> location;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">char</span> *<span class="title">get_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Been_Token</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		IsContinue = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> TotalTime;</span><br><span class="line">	<span class="keyword">bool</span> is_continue = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> NowTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Time(<span class="keyword">int</span> t) :TotalTime(t)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果是武士的行为就需要引用司令部，武器的行为需要引用武士</span></span><br><span class="line">	<span class="comment">//因为一个司令部有很多武士，一个武士有很多武器</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">create_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">escape_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">forward_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b, city **)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rob_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">fight_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">headquarte_report</span><span class="params">(headquarter &amp;a)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_nowtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		++NowTime;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_nowtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> NowTime;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">warriors_report</span><span class="params">(warrior *a)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weapon</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">warrior</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> life;						<span class="comment">//武士的生命</span></span><br><span class="line">	<span class="keyword">int</span> seria;						<span class="comment">//武士的编号</span></span><br><span class="line">	<span class="keyword">int</span> damage;						<span class="comment">//武士的攻击力</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon *&gt;weapons;	<span class="comment">//用来存放武器的优先队列</span></span><br><span class="line">	<span class="keyword">int</span> location;					<span class="comment">//现在的位置</span></span><br><span class="line">	<span class="keyword">int</span> WeaponsNum[<span class="number">3</span>] = &#123;&#125;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> HqtName;					<span class="comment">//所属司令部的名字,0表示red,1表示blue</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> colorname;			<span class="comment">//没办法了，真的需要这个</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	warrior(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>) :life(l),</span><br><span class="line">		seria(s), damage(d), location(L), HqtName(p)</span><br><span class="line">	&#123;</span><br><span class="line">		name = <span class="string">&quot;warrior&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">			colorname = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			colorname = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt; &amp; <span class="title">get_weapons</span><span class="params">()</span>			<span class="comment">//返回武士的武器，记得使用引用</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> weapons;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">get_name</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">get_color</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> colorname;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_hqt</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> HqtName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_life</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> life;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_attack</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> damage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_life</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		life -= n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_loc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> location;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_seria</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> seria;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_die</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (life &lt;= <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rob_weapon</span><span class="params">(warrior* enermy)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Delete_weapon</span><span class="params">(weapon *)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">gaming</span><span class="params">(<span class="keyword">int</span> times, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_weaponnum</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		--WeaponsNum[s];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sort_weapons</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//第10分时的移动，每一次在headquarters的warriors都用一次</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> warrior*  <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dragon</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	dragon(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">yell</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		       <span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span> <span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		yell(time, city);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ninja</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	ninja(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iceman</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	iceman(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>);</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		life -= life * <span class="number">1</span> / <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lion</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> loyalty;</span><br><span class="line">	<span class="keyword">int</span> K;				<span class="comment">//每一次行走消耗的忠诚度，命名逐渐暴躁</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	lion(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>, <span class="keyword">int</span> k = <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (loyalty &lt;= <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		loyalty -= K;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span>, <span class="keyword">int</span>)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wolf</span> :</span><span class="keyword">public</span> warrior</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	wolf(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>, <span class="keyword">int</span> L = <span class="number">0</span>, <span class="keyword">int</span> r = <span class="number">0</span>, <span class="keyword">int</span> p = <span class="number">0</span>) :</span><br><span class="line">		warrior(l, s, d, L, r, p)</span><br><span class="line">	&#123;</span><br><span class="line">		name = <span class="string">&quot;wolf&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">warrior* <span class="title">forward</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		location += n;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before_game</span><span class="params">(warrior* enermy, <span class="keyword">int</span> NoWtime, <span class="keyword">int</span> City)</span>		<span class="comment">//为了wolf的偷武器而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		wolf_rob(enermy, NoWtime, City);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after_game</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span>	<span class="comment">//为了dragon的yell而设置的</span></span></span><br><span class="line"><span class="function">	</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_escape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_use_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">wolf_rob</span><span class="params">(warrior *, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pair</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> first;</span><br><span class="line">	<span class="keyword">int</span> second;</span><br><span class="line">	Pair(<span class="keyword">int</span> f, <span class="keyword">int</span> s) :first(f), second(s) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weapon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> WeaponDamage;		<span class="comment">//武器的攻击力</span></span><br><span class="line">	<span class="keyword">int</span> WeaponSeria;		<span class="comment">//武器的编号，用于后面排序</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	weapon(<span class="keyword">int</span> d, <span class="keyword">int</span> w) :WeaponDamage(d), WeaponSeria(w) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span> MyDamage)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Pair(WeaponDamage, MyDamage);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_seria</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> WeaponSeria;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		WeaponDamage = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_damage</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> WeaponDamage;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;	<span class="comment">//每次使用武器后就调用这个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sword</span> :</span><span class="keyword">public</span> weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Availbleuse = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	sword(<span class="keyword">int</span> d = <span class="number">0</span>) :weapon(d * <span class="number">2</span> / <span class="number">10</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="function">Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="keyword">return</span> weapon::using_weapon(<span class="number">0</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		weapon::change_damege(t * <span class="number">2</span> / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bomb</span> :</span><span class="keyword">public</span> weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> AvailbleUse = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	bomb(<span class="keyword">int</span> d = <span class="number">0</span>) :weapon(d * <span class="number">4</span> / <span class="number">10</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function">Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		--AvailbleUse;</span><br><span class="line">		<span class="keyword">return</span> weapon::using_weapon(get_damage() / <span class="number">2</span>);</span><br><span class="line">	&#125;<span class="comment">//</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> AvailbleUse;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		weapon::change_damege(t * <span class="number">4</span> / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrow</span> :</span><span class="keyword">public</span> weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> AvailbleUse = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	arrow(<span class="keyword">int</span> d = <span class="number">0</span>) :weapon(d * <span class="number">3</span> / <span class="number">10</span>, <span class="number">2</span>) &#123;&#125;</span><br><span class="line">	<span class="function">Pair <span class="title">using_weapon</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		--AvailbleUse;</span><br><span class="line">		<span class="keyword">return</span> weapon::using_weapon(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (AvailbleUse == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get_use_times</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> AvailbleUse;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_damege</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		weapon::change_damege(t * <span class="number">3</span> / <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//life表示武士的生命，L表示武士的位置，s表示武士的标号，可以用choice确定使用哪一个武士</span></span><br><span class="line"><span class="function">warrior* <span class="title">factorial::creator_warrior</span><span class="params">(<span class="keyword">int</span> choice, <span class="keyword">int</span> s, <span class="keyword">int</span> life, <span class="keyword">int</span> L, <span class="keyword">int</span> total, <span class="keyword">int</span> N, <span class="keyword">int</span> *WarriorAttack,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	warrior *ptemp;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="number">0</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> dragon(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> ninja(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> iceman(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>)</span><br><span class="line">		ptemp = <span class="keyword">new</span> lion(life, s, WarriorAttack[choice], L, total, N, K);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ptemp = <span class="keyword">new</span> wolf(life, s, WarriorAttack[choice], L, total, N);</span><br><span class="line">	<span class="keyword">return</span> ptemp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//N是武士存放武器的数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factorial::creator_weapon</span><span class="params">(<span class="keyword">int</span> attack, <span class="keyword">int</span> seria, <span class="keyword">int</span> num, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt; &amp;d,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">int</span> *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	weapon * ptemp1;</span><br><span class="line">	weapon *ptemp2;</span><br><span class="line">	<span class="keyword">if</span> (seria % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">		ptemp1 = <span class="keyword">new</span> sword(attack);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (seria % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">		ptemp1 = <span class="keyword">new</span> bomb(attack);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ptemp1 = <span class="keyword">new</span> arrow(attack);</span><br><span class="line">	<span class="keyword">if</span> ((seria + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">		ptemp2 = <span class="keyword">new</span> sword(attack);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ((seria + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">		ptemp2 = <span class="keyword">new</span> bomb(attack);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ptemp2 = <span class="keyword">new</span> arrow(attack);</span><br><span class="line">	<span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		d.push_back(ptemp1);</span><br><span class="line">		++N[seria % <span class="number">3</span>];</span><br><span class="line">		<span class="comment">//在函数里申请空间而不delete也是不会回收的，所以这里要delete ptemp2</span></span><br><span class="line">		<span class="keyword">delete</span> ptemp2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		d.push_back(ptemp1);</span><br><span class="line">		++N[seria % <span class="number">3</span>];</span><br><span class="line">		d.push_back(ptemp2);</span><br><span class="line">		++N[(seria + <span class="number">1</span>) % <span class="number">3</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">city::city_delete</span><span class="params">(warrior *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; qwarriors.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (qwarriors[t] == temp)</span><br><span class="line">		&#123;</span><br><span class="line">			qwarriors.erase(qwarriors.begin() + t);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">city::add_qwarriors</span><span class="params">(warrior *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qwarriors.push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">headquarter::produce</span><span class="params">(<span class="keyword">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (WheatherCreate == <span class="literal">false</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (!getnextMakeValidWarriorKind())</span><br><span class="line">	&#123;</span><br><span class="line">		WheatherCreate = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> N = <span class="built_in">std</span>::<span class="built_in">strlen</span>(get_name()) - <span class="number">3</span>;</span><br><span class="line">		TotalLife -= LifeNeed[makeseq[WarriorSeria % <span class="number">5</span>]];</span><br><span class="line">		warrior *ptemp = factorial::creator_warrior(makeseq[WarriorSeria % <span class="number">5</span>], WarriorSeria + <span class="number">1</span>,</span><br><span class="line">			LifeNeed[makeseq[WarriorSeria % <span class="number">5</span>]], location, TotalLife, N, WarriorAttack, lionloyalty);</span><br><span class="line">		warriors.push_back(ptemp);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; time;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:00 %s %s %d born\n&quot;</span>, name, ptemp-&gt;get_name().c_str(), WarriorSeria + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (ptemp-&gt;get_name() == <span class="string">&quot;lion&quot;</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Its loyalty is %d\n&quot;</span>, TotalLife);</span><br><span class="line">		++WarriorSeria;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">headquarter::delete_warrior</span><span class="params">(warrior *temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; warriors.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (warriors[t] == temp)</span><br><span class="line">		&#123;</span><br><span class="line">			warriors.erase(warriors.begin() + t);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::create_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (NowTime * <span class="number">60</span> &gt; TotalTime)</span><br><span class="line">	&#123;</span><br><span class="line">		is_continue = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	a.produce(NowTime);</span><br><span class="line">	b.produce(NowTime);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::escape_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x1 = a.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x1.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x1[t]-&gt;get_name() == <span class="string">&quot;lion&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x1[t]-&gt;is_escape())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;:05 %s %s %d ran away\n&quot;</span>, a.get_name(),</span><br><span class="line">					x1[t]-&gt;get_name().c_str(), t + <span class="number">1</span>);</span><br><span class="line">				x1.erase(x1.begin() + t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x2 = b.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x2.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x2[t]-&gt;get_name() == <span class="string">&quot;lion&quot;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x2[t]-&gt;is_escape())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;:05 %s %s %d ran away\n&quot;</span>, b.get_name(),</span><br><span class="line">					x2[t]-&gt;get_name().c_str(), t + <span class="number">1</span>);</span><br><span class="line">				x2.erase(x2.begin() + t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::forward_event</span><span class="params">(headquarter &amp;a, headquarter &amp;b, city **arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x1 = a.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x1.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> ptemp = x1[t]-&gt;forward(<span class="number">1</span>);</span><br><span class="line">		arr[ptemp-&gt;get_loc()]-&gt;add_qwarriors(ptemp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> &amp;x2 = b.get_warrios();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; x2.size(); t++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> ptemp = x2[t]-&gt;forward(<span class="number">-1</span>);</span><br><span class="line">		arr[ptemp-&gt;get_loc()]-&gt;add_qwarriors(ptemp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::rob_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span> City)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_name() == <span class="string">&quot;wolf&quot;</span>&amp;&amp;b-&gt;get_name() != <span class="string">&quot;wolf&quot;</span>)</span><br><span class="line">		a-&gt;before_game(b, NowTime, City);</span><br><span class="line">	<span class="keyword">if</span> (b-&gt;get_name() == <span class="string">&quot;wolf&quot;</span>&amp;&amp;a-&gt;get_name() != <span class="string">&quot;wolf&quot;</span>)</span><br><span class="line">		b-&gt;before_game(a, NowTime, City);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Time::fight_event</span><span class="params">(warrior *a, warrior *b, <span class="keyword">int</span> choose)</span><span class="comment">//choose是city的编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a-&gt;sort_weapons();</span><br><span class="line">	b-&gt;sort_weapons();</span><br><span class="line">	<span class="keyword">int</span> t1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> t2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">2</span>;				<span class="comment">//-1表示a赢，0表示打和，1表示b赢,2表示都死了</span></span><br><span class="line">	<span class="keyword">while</span> (!a-&gt;is_die() &amp;&amp; !b-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a-&gt;get_weapons().size() == <span class="number">0</span> &amp;&amp; b-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : b-&gt;get_weapons())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (x-&gt;get_damage() != <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//攻击力为0的arrow,和攻击力为0的sword</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;get_damage() == <span class="number">0</span> &amp;&amp; x-&gt;get_use_times() != <span class="number">0</span>)</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : a-&gt;get_weapons())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (x-&gt;get_damage() != <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;get_damage() == <span class="number">0</span> &amp;&amp; x-&gt;get_use_times() != <span class="number">0</span>)</span><br><span class="line">					s = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (s == <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a-&gt;get_weapons().size() != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> dmg = a-&gt;gaming(t1%a-&gt;get_weapons().size(), t1);</span><br><span class="line">			b-&gt;change_life(dmg);</span><br><span class="line">			<span class="keyword">if</span> (a-&gt;is_die())</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (b-&gt;is_die())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (b-&gt;get_weapons().size() != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> dmg = b-&gt;gaming(t2%b-&gt;get_weapons().size(), t2);</span><br><span class="line">			a-&gt;change_life(dmg);</span><br><span class="line">			<span class="keyword">if</span> (b-&gt;is_die())</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++t1;</span><br><span class="line">		++t2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//让a是红，这里交换指针指向的值并不会影响实际的值</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_color() == <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> temp = a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!a-&gt;is_die() &amp;&amp; !b-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 both red %s %d and blue %s %d were alive in city %d\n&quot;</span>,</span><br><span class="line">			a-&gt;get_name().c_str(), a-&gt;get_seria(), b-&gt;get_name().c_str(), b-&gt;get_seria(),</span><br><span class="line">			choose);</span><br><span class="line">		a-&gt;after_game(NowTime, choose);</span><br><span class="line">		b-&gt;after_game(NowTime, choose);</span><br><span class="line">		flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;is_die() &amp;&amp; b-&gt;is_die())</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 both red %s %d and blue %s %d died in city %d\n&quot;</span>,</span><br><span class="line">			a-&gt;get_name().c_str(), a-&gt;get_seria(), b-&gt;get_name().c_str(), b-&gt;get_seria(),</span><br><span class="line">			choose);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 blue %s %d killed red %s %d in city %d remaining %d elements\n&quot;</span>,</span><br><span class="line">			b-&gt;get_name().c_str(), b-&gt;get_seria(), a-&gt;get_name().c_str(), a-&gt;get_seria(), choose,</span><br><span class="line">			b-&gt;get_life());</span><br><span class="line">		b-&gt;rob_weapon(a);</span><br><span class="line">		b-&gt;after_game(NowTime, choose);</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;is_die())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;:40 red %s %d killed blue %s %d in city %d remaining %d elements\n&quot;</span>,</span><br><span class="line">			a-&gt;get_name().c_str(), a-&gt;get_seria(), b-&gt;get_name().c_str(), b-&gt;get_seria(), choose,</span><br><span class="line">			a-&gt;get_life());</span><br><span class="line">		flag = <span class="number">-1</span>;</span><br><span class="line">		a-&gt;rob_weapon(b);</span><br><span class="line">		a-&gt;after_game(NowTime, choose);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::headquarte_report</span><span class="params">(headquarter &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = a.get_totalife();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:50 %d elements in %s headquarter\n&quot;</span>, n, a.get_name());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Time::warriors_report</span><span class="params">(warrior *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a-&gt;report(NowTime, a-&gt;get_color().c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(weapon *a, weapon *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_seria() == b-&gt;get_seria())</span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_use_times() &lt; b-&gt;get_use_times();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_seria() &lt; b-&gt;get_seria();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(weapon *a, weapon *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a-&gt;get_seria() == b-&gt;get_seria())</span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_use_times() &gt; b-&gt;get_use_times();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> a-&gt;get_seria() &lt; b-&gt;get_seria();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::Delete_weapon</span><span class="params">(weapon* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : weapons)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == w)</span><br><span class="line">		&#123;</span><br><span class="line">			weapons.erase(weapons.begin() + t);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::sort_weapons</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sort(weapons.begin(), weapons.end(), cmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::report</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">const</span> <span class="keyword">char</span> *N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; t;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:55 %s %s %d has %d sword %d bomb %d arrow and %d elements\n&quot;</span>,</span><br><span class="line">		N, name.c_str(), seria, WeaponsNum[<span class="number">0</span>], WeaponsNum[<span class="number">1</span>], WeaponsNum[<span class="number">2</span>], life);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//time小时，str是红蓝的名字，city是city的编号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragon::yell</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> city)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; time;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:40 %s dragon %d yelled in city %d\n&quot;</span>, colorname.c_str(), seria, city);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">warrior::gaming</span><span class="params">(<span class="keyword">int</span> times, <span class="keyword">int</span> &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> x = weapons[times];</span><br><span class="line">	<span class="keyword">auto</span> p = x-&gt;using_weapon(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (is_use_bomb())</span><br><span class="line">		life -= p.second;</span><br><span class="line">	<span class="keyword">if</span> (x-&gt;is_bad())</span><br><span class="line">	&#123;</span><br><span class="line">		--WeaponsNum[x-&gt;get_seria()];</span><br><span class="line">		--t;</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x0 : weapons)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x0 == x)</span><br><span class="line">			&#123;</span><br><span class="line">				weapons.erase(weapons.begin() + k);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">delete</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p.first;</span><br><span class="line">&#125;</span><br><span class="line">dragon::dragon(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p) :</span><br><span class="line">	warrior(l, s, d, L, r, p)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;dragon&quot;</span>;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">1</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line">ninja::ninja(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p) :</span><br><span class="line">	warrior(l, s, d, L, r, p)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;ninja&quot;</span>;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">2</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line">iceman::iceman(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p) :</span><br><span class="line">	warrior(l, s, d, L, r, p)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;iceman&quot;</span>;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">1</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line">lion::lion(<span class="keyword">int</span> l, <span class="keyword">int</span> s, <span class="keyword">int</span> d, <span class="keyword">int</span> L, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> k) :</span><br><span class="line">	warrior(l, s, d, L, r, p), K(k)</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">	loyalty = r;</span><br><span class="line">	factorial::creator_weapon(d, s, <span class="number">1</span>, weapons, WeaponsNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warrior::rob_weapon</span><span class="params">(warrior* enermy)</span>			<span class="comment">//抢劫武器</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> min = INT_MAX;</span><br><span class="line">	<span class="keyword">if</span> (weapons.size() &gt;= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : enermy-&gt;get_weapons())</span><br><span class="line">			<span class="keyword">delete</span> x;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(enermy-&gt;get_weapons().begin(), enermy-&gt;get_weapons().end(), cmp1);</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (weapons.size() != <span class="number">10</span> &amp;&amp; t &lt; enermy-&gt;get_weapons().size())</span><br><span class="line">	&#123;</span><br><span class="line">		weapons.push_back(enermy-&gt;get_weapons()[t]);</span><br><span class="line">		enermy-&gt;get_weapons()[t]-&gt;change_damege(get_attack());</span><br><span class="line">		++WeaponsNum[enermy-&gt;get_weapons()[t]-&gt;get_seria()];</span><br><span class="line">		++t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = t; k &lt; enermy-&gt;get_weapons().size(); k++)</span><br><span class="line">		<span class="keyword">delete</span> enermy-&gt;get_weapons()[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//wolf的抢劫不删除剩余的武器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wolf::wolf_rob</span><span class="params">(warrior* enermy, <span class="keyword">int</span> NowTime, <span class="keyword">int</span> City)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (weapons.size() &gt;= <span class="number">10</span> || enermy-&gt;get_weapons().size() == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> min = INT_MAX;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weapon*&gt; temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : enermy-&gt;get_weapons())</span><br><span class="line">	&#123;</span><br><span class="line">		min = min &lt; x-&gt;get_seria() ? min : x-&gt;get_seria();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : enermy-&gt;get_weapons())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;get_seria() == min)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.push_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//把武器排好序</span></span><br><span class="line">	<span class="built_in">std</span>::sort(temp.begin(), temp.end(), cmp1);</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//把要缴获的武器放进，容器里</span></span><br><span class="line">	<span class="keyword">while</span> (weapons.size() != <span class="number">10</span> &amp;&amp; t &lt; temp.size())</span><br><span class="line">	&#123;</span><br><span class="line">		weapons.push_back(temp[t]);</span><br><span class="line">		temp[t]-&gt;change_damege(get_attack());</span><br><span class="line">		++WeaponsNum[temp[t]-&gt;get_seria()];</span><br><span class="line">		<span class="comment">//把敌人的武器erase但不用delete;这里的erase只要一直begin就好！！</span></span><br><span class="line">		enermy-&gt;change_weaponnum(min);</span><br><span class="line">		enermy-&gt;Delete_weapon(temp[t]);</span><br><span class="line">		++t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; NowTime;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s1;</span><br><span class="line">	<span class="keyword">if</span> (min == <span class="number">0</span>)</span><br><span class="line">		s1 = <span class="string">&quot;sword&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (min == <span class="number">1</span>)</span><br><span class="line">		s1 = <span class="string">&quot;bomb&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		s1 = <span class="string">&quot;arrow&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;:35 %s %s %d took %d %s from %s %s %d in city %d\n&quot;</span>, colorname.c_str(),</span><br><span class="line">		get_name().c_str(), get_seria(), t, s1.c_str(), enermy-&gt;get_color().c_str(),</span><br><span class="line">		enermy-&gt;get_name().c_str(), enermy-&gt;get_seria(), City);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_CITY = <span class="number">22</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(warrior *x, headquarter &amp;a, headquarter &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x-&gt;get_color() == a.get_name())</span><br><span class="line">		a.delete_warrior(x);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		b.delete_warrior(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> red[] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;		<span class="comment">//红色司令部制造武士的顺序</span></span><br><span class="line">	<span class="keyword">int</span> blue[] = &#123; <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;		<span class="comment">//蓝色司令部制造武士的顺序</span></span><br><span class="line">	<span class="keyword">int</span> lifearr[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> attackarr[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> TestNum, M, N, K, T, count = <span class="number">1</span>;				<span class="comment">//M生命元，N城市数量，K lion的忠诚消耗，T总时间</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; TestNum;</span><br><span class="line">	<span class="keyword">while</span> (TestNum--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N &gt;&gt; K &gt;&gt; T;</span><br><span class="line">		city *CityArr[MAX_CITY];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">			CityArr[t] = <span class="keyword">new</span> city(t);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>, count);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; NUM; b++)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; lifearr[b];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; NUM; b++)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; attackarr[b];</span><br><span class="line">		<span class="function">headquarter <span class="title">a</span><span class="params">(M, red, <span class="number">0</span>, N, lifearr, attackarr, K)</span></span>;</span><br><span class="line">		<span class="function">headquarter <span class="title">b</span><span class="params">(M, blue, <span class="number">1</span>, N, lifearr, attackarr, K)</span></span>;</span><br><span class="line">		CityArr[<span class="number">0</span>] = &amp;a;</span><br><span class="line">		CityArr[N + <span class="number">1</span>] = &amp;b;</span><br><span class="line">		<span class="function">Time <span class="title">temp</span><span class="params">(T)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (a.is_continue() &amp;&amp; b.is_continue())</span><br><span class="line">		&#123;</span><br><span class="line">			temp.create_event(a, b);</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			temp.escape_event(a, b);</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">5</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">				CityArr[t]-&gt;show_qwarriors().clear();</span><br><span class="line">			temp.forward_event(a, b, CityArr);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= N + <span class="number">1</span>; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (CityArr[t]-&gt;show_qwarriors().size() &gt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">auto</span> x : CityArr[t]-&gt;show_qwarriors())</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; temp.get_nowtime();</span><br><span class="line">						<span class="keyword">if</span> (x-&gt;get_loc() != b.get_location() &amp;&amp; x-&gt;get_loc() != a.get_location())</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s %s %d marched to city %d with %d elements and force %d\n&quot;</span>,</span><br><span class="line">								x-&gt;get_color().c_str(), x-&gt;get_name().c_str(), x-&gt;get_seria(), x-&gt;get_loc(),</span><br><span class="line">								x-&gt;get_life(), x-&gt;get_attack());</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;get_loc() == a.get_location())</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,</span><br><span class="line">								b.get_name(), x-&gt;get_name().c_str(), x-&gt;get_seria(), a.get_name(),</span><br><span class="line">								x-&gt;get_life(), x-&gt;get_attack());</span><br><span class="line">							<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; temp.get_nowtime();</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s headquarter was taken\n&quot;</span>, a.get_name());</span><br><span class="line">							a.Been_Token();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,</span><br><span class="line">								a.get_name(), x-&gt;get_name().c_str(), x-&gt;get_seria(), b.get_name(),</span><br><span class="line">								x-&gt;get_life(), x-&gt;get_attack());</span><br><span class="line">							<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">3</span>) &lt;&lt; temp.get_nowtime();</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;:10 %s headquarter was taken\n&quot;</span>, b.get_name());</span><br><span class="line">							b.Been_Token();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!a.is_continue() || !b.is_continue())</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">10</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (CityArr[t]-&gt;show_qwarriors().size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">auto</span> x = CityArr[t]-&gt;show_qwarriors();</span><br><span class="line">					<span class="keyword">auto</span> x1 = x[<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">auto</span> x2 = x[<span class="number">1</span>];</span><br><span class="line">					temp.rob_event(x1, x2, t);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">35</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">auto</span> redheadquarterwarriors = a.get_warrios();</span><br><span class="line">			<span class="keyword">auto</span> blueheadquarterwarriors = b.get_warrios();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= N; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//奇数红色先攻击，偶数蓝色先攻击</span></span><br><span class="line">				<span class="keyword">if</span> (CityArr[t]-&gt;show_qwarriors().size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">auto</span> x = CityArr[t]-&gt;show_qwarriors();</span><br><span class="line">					<span class="keyword">auto</span> x1 = x[<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">auto</span> x2 = x[<span class="number">1</span>];</span><br><span class="line">					<span class="comment">//让x1为红，x2为蓝</span></span><br><span class="line">					<span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">std</span>::swap(x1, x2);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;red&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">std</span>::swap(x1, x2);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">int</span> result = temp.fight_event(x1, x2, t);</span><br><span class="line">					<span class="keyword">if</span> (result == <span class="number">1</span>)	<span class="comment">//blue赢</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;red&quot;</span>)	<span class="comment">//没交换</span></span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x1, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x1);</span><br><span class="line">							<span class="keyword">delete</span> x1;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x2, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x2);</span><br><span class="line">							<span class="keyword">delete</span> x2;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x1, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x1);</span><br><span class="line">							<span class="keyword">delete</span> x1;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							Delete(x2, a, b);</span><br><span class="line">							CityArr[t]-&gt;city_delete(x2);</span><br><span class="line">							<span class="keyword">delete</span> x2;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">2</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (x1-&gt;get_color() == <span class="string">&quot;red&quot;</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							a.delete_warrior(x1);</span><br><span class="line">							b.delete_warrior(x2);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							a.delete_warrior(x2);</span><br><span class="line">							b.delete_warrior(x1);</span><br><span class="line">						&#125;</span><br><span class="line">						CityArr[t]-&gt;city_delete(x1);</span><br><span class="line">						CityArr[t]-&gt;city_delete(x2);</span><br><span class="line">						<span class="keyword">delete</span> x[<span class="number">1</span>];</span><br><span class="line">						<span class="keyword">delete</span> x[<span class="number">0</span>];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">40</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			temp.headquarte_report(a);</span><br><span class="line">			temp.headquarte_report(b);</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">50</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//temp.warrior_report(a, b);</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= N + <span class="number">1</span>; t++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">auto</span> x = CityArr[t]-&gt;show_qwarriors();</span><br><span class="line">				<span class="keyword">if</span> (x.size() == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					temp.warriors_report(x[<span class="number">0</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (x.size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (x[<span class="number">0</span>]-&gt;get_color() == <span class="string">&quot;red&quot;</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						temp.warriors_report(x[<span class="number">0</span>]);</span><br><span class="line">						temp.warriors_report(x[<span class="number">1</span>]);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						temp.warriors_report(x[<span class="number">1</span>]);</span><br><span class="line">						temp.warriors_report(x[<span class="number">0</span>]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (temp.get_nowtime() * <span class="number">60</span> + <span class="number">55</span> &gt;= T)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			temp.add_nowtime();</span><br><span class="line">		&#125;</span><br><span class="line">		++count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
</search>
